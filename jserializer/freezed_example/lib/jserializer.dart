// GENERATED CODE. DO NOT MODIFY. Generated by JSerializerGenerator.

// ignore_for_file: unused_field,unnecessary_null_checks,prefer-match-file-name,depend_on_referenced_packages,lines_longer_than_80_chars,non_constant_identifier_names,constant_identifier_names,prefer_const_constructors,strict_raw_type,omit_local_variable_types,avoid_dynamic_calls,unnecessary_parenthesis,unnecessary_nullable_for_final_variable_declarations,annotate_overrides,type_annotate_public_apis,newline-before-return,prefer-trailing-comma,directives_ordering,long-method,use_named_constants

// **************************************************************************
// JSerializer: Serialization Done Right
// **************************************************************************

import 'package:jserializer/jserializer.dart' as js;
import 'package:freezed_example/union.dart';
import 'package:freezed_example/union2.dart';
import 'package:freezed_example/generic_union.dart';

class UnionFirstSerializer extends js.ModelSerializer<UnionFirst> {
  const UnionFirstSerializer();

  static const jsonKeys = {'number'};

  @override
  UnionFirst fromJson(json) {
    final int number$Value = mapLookup(jsonName: 'number', json: json) ?? 32;
    return UnionFirst(number: number$Value);
  }

  @override
  Map<String, dynamic> toJson(UnionFirst model) => {'number': model.number};
}

class UnionSecondSerializer extends js.ModelSerializer<UnionSecond> {
  const UnionSecondSerializer();

  static const jsonKeys = {'greeting'};

  @override
  UnionSecond fromJson(json) {
    final String greeting$Value =
        mapLookup(jsonName: 'greeting', json: json) ?? 'Hello';
    return UnionSecond(greeting: greeting$Value);
  }

  @override
  Map<String, dynamic> toJson(UnionSecond model) =>
      {'greeting': model.greeting};
}

class UnionThirdSerializer extends js.ModelSerializer<UnionThird> {
  const UnionThirdSerializer();

  static const jsonKeys = {'flag'};

  @override
  UnionThird fromJson(json) {
    final bool flag$Value = mapLookup(jsonName: 'flag', json: json) ?? true;
    return UnionThird(flag: flag$Value);
  }

  @override
  Map<String, dynamic> toJson(UnionThird model) => {'flag': model.flag};
}

class UnionSerializer extends js.ModelSerializer<Union> {
  const UnionSerializer();

  static const _UnionFirstSerializer = UnionFirstSerializer();

  static const _UnionSecondSerializer = UnionSecondSerializer();

  static const _UnionThirdSerializer = UnionThirdSerializer();

  Union fromJson(json) {
    if (json is Union) return json;
    if (json is! Map) {
      throw Exception(
        'JSON passed to fromJson of Union) is not a Map!\njson: $json',
      );
    }
    final type = json['type'];
    if (type is! String) {
      throw Exception(
        'Type passed to fromJson of Union) is not a String!\nvalue: $type',
      );
    }
    if (json[type] == 'first') {
      return _UnionFirstSerializer.fromJson(json);
    }
    if (json[type] == 'the_second') {
      return _UnionSecondSerializer.fromJson(json);
    }
    if (json[type] == 'third') {
      return _UnionThirdSerializer.fromJson(json);
    } else {
      return UnionSecond();
    }
  }

  Map<String, dynamic> toJson(Union model) {
    if (model is UnionFirst) {
      return {
        'type': 'first',
        ..._UnionFirstSerializer.toJson(model),
      };
    }
    if (model is UnionSecond) {
      return {
        'type': 'the_second',
        ..._UnionSecondSerializer.toJson(model),
      };
    }
    if (model is UnionThird) {
      return {
        'type': 'third',
        ..._UnionThirdSerializer.toJson(model),
      };
    } else {
      return {'type': 'the_second'};
    }
  }
}

class Union2FirstSerializer extends js.ModelSerializer<Union2First> {
  const Union2FirstSerializer();

  static const jsonKeys = {'number', 'number2', 'something'};

  @override
  Union2First fromJson(json) {
    final int number$Value = mapLookup(jsonName: 'number', json: json) ?? 32;
    final int number2$Value = mapLookup(jsonName: 'number2', json: json);
    final String? something$Value =
        mapLookup(jsonName: 'something', json: json);
    return Union2First(
        number: number$Value,
        number2: number2$Value,
        something: something$Value);
  }

  @override
  Map<String, dynamic> toJson(Union2First model) => {
        'number': model.number,
        'number2': model.number2,
        'something': model.something
      };
}

class Union2SecondSerializer extends js.ModelSerializer<Union2Second> {
  const Union2SecondSerializer();

  static const jsonKeys = {'greeting'};

  @override
  Union2Second fromJson(json) {
    final String greeting$Value =
        mapLookup(jsonName: 'greeting', json: json) ?? 'Hello';
    return Union2Second(greeting: greeting$Value);
  }

  @override
  Map<String, dynamic> toJson(Union2Second model) =>
      {'greeting': model.greeting};
}

class Union2ThirdSerializer extends js.ModelSerializer<Union2Third> {
  const Union2ThirdSerializer();

  static const jsonKeys = {'flag'};

  @override
  Union2Third fromJson(json) {
    final bool flag$Value = mapLookup(jsonName: 'flag', json: json) ?? true;
    return Union2Third(flag: flag$Value);
  }

  @override
  Map<String, dynamic> toJson(Union2Third model) => {'flag': model.flag};
}

class Union2Serializer extends js.ModelSerializer<Union2> {
  const Union2Serializer();

  static const _Union2FirstSerializer = Union2FirstSerializer();

  static const _Union2SecondSerializer = Union2SecondSerializer();

  static const _Union2ThirdSerializer = Union2ThirdSerializer();

  Union2 fromJson(json) {
    if (json is Union2) return json;
    if (json is! Map) {
      throw Exception(
        'JSON passed to fromJson of Union2) is not a Map!\njson: $json',
      );
    }
    final type = json['type'];
    if (type is! String) {
      throw Exception(
        'Type passed to fromJson of Union2) is not a String!\nvalue: $type',
      );
    }
    if (json[type] == 'first') {
      return _Union2FirstSerializer.fromJson(json);
    }
    if (json[type] == 'the_second') {
      return _Union2SecondSerializer.fromJson(json);
    }
    if (json[type] == 'third') {
      return _Union2ThirdSerializer.fromJson(json);
    } else {
      throw Exception('Unknown type $type of union type Union2');
    }
  }

  Map<String, dynamic> toJson(Union2 model) {
    if (model is Union2First) {
      return {
        'type': 'first',
        ..._Union2FirstSerializer.toJson(model),
      };
    }
    if (model is Union2Second) {
      return {
        'type': 'the_second',
        ..._Union2SecondSerializer.toJson(model),
      };
    }
    if (model is Union2Third) {
      return {
        'type': 'third',
        ..._Union2ThirdSerializer.toJson(model),
      };
    } else {
      throw Exception('Unknown type of union value: $model');
    }
  }
}

class GenericUnionFirstSerializer
    extends js.GenericModelSerializer<GenericUnionFirst> {
  GenericUnionFirstSerializer(js.JSerializerInterface jSerializer)
      : super(jSerializer);

  GenericUnionFirstSerializer.from({required js.Serializer serializer})
      : super.from(serializer: serializer);

  static const jsonKeys = {'number', 'value'};

  @override
  M fromJsonGeneric<M extends GenericUnionFirst, T>(json) {
    final int number$Value = mapLookup(jsonName: 'number', json: json) ?? 32;
    final value$Json = json['value'];
    final T value$Value = safe<T>(
        call: () => getGenericValue<T>(value$Json, serializer),
        jsonName: 'value',
        modelType: M);
    return (GenericUnionFirst<T>(number: number$Value, value: value$Value)
        as M);
  }

  @override
  Map<String, dynamic> toJson(GenericUnionFirst model) => {
        'number': model.number,
        'value': getGenericValueToJson(model.value, serializer)
      };
}

class GenericUnionSecondSerializer
    extends js.GenericModelSerializer<GenericUnionSecond> {
  GenericUnionSecondSerializer(js.JSerializerInterface jSerializer)
      : super(jSerializer);

  GenericUnionSecondSerializer.from({required js.Serializer serializer})
      : super.from(serializer: serializer);

  static const jsonKeys = {'greeting'};

  @override
  M fromJsonGeneric<M extends GenericUnionSecond, T>(json) {
    final String greeting$Value =
        mapLookup(jsonName: 'greeting', json: json) ?? 'Hello';
    return (GenericUnionSecond<T>(greeting: greeting$Value) as M);
  }

  @override
  Map<String, dynamic> toJson(GenericUnionSecond model) =>
      {'greeting': model.greeting};
}

class GenericUnionThirdSerializer
    extends js.GenericModelSerializer<GenericUnionThird> {
  GenericUnionThirdSerializer(js.JSerializerInterface jSerializer)
      : super(jSerializer);

  GenericUnionThirdSerializer.from({required js.Serializer serializer})
      : super.from(serializer: serializer);

  static const jsonKeys = {'flag'};

  @override
  M fromJsonGeneric<M extends GenericUnionThird, T>(json) {
    final bool flag$Value = mapLookup(jsonName: 'flag', json: json) ?? true;
    return (GenericUnionThird<T>(flag: flag$Value) as M);
  }

  @override
  Map<String, dynamic> toJson(GenericUnionThird model) => {'flag': model.flag};
}

class GenericUnionSerializer extends js.GenericModelSerializer<GenericUnion> {
  GenericUnionSerializer(js.JSerializerInterface jSerializer)
      : super(jSerializer);

  GenericUnionSerializer.from({required js.Serializer serializer})
      : super.from(serializer: serializer);

  late final _GenericUnionFirst_TSerializer =
      GenericUnionFirstSerializer.from(serializer: serializer!);

  late final _GenericUnionSecond_TSerializer =
      GenericUnionSecondSerializer.from(serializer: serializer!);

  late final _GenericUnionThird_TSerializer =
      GenericUnionThirdSerializer.from(serializer: serializer!);

  M fromJsonGeneric<M extends GenericUnion, T>(json) {
    if (json is M) return json;
    if (json is! Map) {
      throw Exception(
        'JSON passed to fromJson of GenericUnion) is not a Map!\njson: $json',
      );
    }
    final type = json['type'];
    if (type is! String) {
      throw Exception(
        'Type passed to fromJson of GenericUnion) is not a String!\nvalue: $type',
      );
    }
    if (json[type] == 'first') {
      return _GenericUnionFirst_TSerializer.fromJson(json);
    }
    if (json[type] == 'the_second') {
      return _GenericUnionSecond_TSerializer.fromJson(json);
    }
    if (json[type] == 'third') {
      return _GenericUnionThird_TSerializer.fromJson(json);
    } else {
      throw Exception('Unknown type $type of union type GenericUnion');
    }
  }

  Map<String, dynamic> toJson(GenericUnion model) {
    if (model is GenericUnionFirst) {
      return {
        'type': 'first',
        ..._GenericUnionFirst_TSerializer.toJson(model),
      };
    }
    if (model is GenericUnionSecond) {
      return {
        'type': 'the_second',
        ..._GenericUnionSecond_TSerializer.toJson(model),
      };
    }
    if (model is GenericUnionThird) {
      return {
        'type': 'third',
        ..._GenericUnionThird_TSerializer.toJson(model),
      };
    } else {
      throw Exception('Unknown type of union value: $model');
    }
  }
}

void initializeJSerializer() {
  js.JSerializer.register<UnionFirst>(
      (_) => const UnionFirstSerializer(), (Function f) => f<UnionFirst>());
  js.JSerializer.register<UnionSecond>(
      (_) => const UnionSecondSerializer(), (Function f) => f<UnionSecond>());
  js.JSerializer.register<UnionThird>(
      (_) => const UnionThirdSerializer(), (Function f) => f<UnionThird>());
  js.JSerializer.register<Union>(
      (_) => const UnionSerializer(), (Function f) => f<Union>());
  js.JSerializer.register<Union2First>(
      (_) => const Union2FirstSerializer(), (Function f) => f<Union2First>());
  js.JSerializer.register<Union2Second>(
      (_) => const Union2SecondSerializer(), (Function f) => f<Union2Second>());
  js.JSerializer.register<Union2Third>(
      (_) => const Union2ThirdSerializer(), (Function f) => f<Union2Third>());
  js.JSerializer.register<Union2>(
      (_) => const Union2Serializer(), (Function f) => f<Union2>());
  js.JSerializer.register<GenericUnionFirst>(
      (s) => GenericUnionFirstSerializer(s),
      <T>(Function f) => f<GenericUnionFirst<T>>());
  js.JSerializer.register<GenericUnionSecond>(
      (s) => GenericUnionSecondSerializer(s),
      <T>(Function f) => f<GenericUnionSecond<T>>());
  js.JSerializer.register<GenericUnionThird>(
      (s) => GenericUnionThirdSerializer(s),
      <T>(Function f) => f<GenericUnionThird<T>>());
  js.JSerializer.register<GenericUnion>((s) => GenericUnionSerializer(s),
      <T>(Function f) => f<GenericUnion<T>>());
}
