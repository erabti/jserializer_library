// GENERATED CODE. DO NOT MODIFY. Generated by JSerializerGenerator.

// ignore_for_file: unused_field,unnecessary_null_checks,prefer-match-file-name,depend_on_referenced_packages,lines_longer_than_80_chars,non_constant_identifier_names,constant_identifier_names,prefer_const_constructors,strict_raw_type,omit_local_variable_types,avoid_dynamic_calls,unnecessary_parenthesis,unnecessary_nullable_for_final_variable_declarations,annotate_overrides,type_annotate_public_apis,newline-before-return,prefer-trailing-comma,directives_ordering,long-method,use_named_constants

// **************************************************************************
// JSerializer: Serialization Done Right
// **************************************************************************

import 'package:jserializer/jserializer.dart' as js;
import 'package:example/custom_color_serializer.dart';
import 'package:example/branch.dart';
import 'package:flutter/material.dart';
import 'package:example/custom_brightness_serializer.dart';

class SomeClassSerializer extends js.ModelSerializer<SomeClass> {
  const SomeClassSerializer();

  static const jsonKeys = {'value', 'a'};

  @override
  SomeClass fromJson(json) {
    final String? value$Value = mapLookup(jsonName: 'value', json: json);
    final int? a$Value = mapLookup(jsonName: 'a', json: json);
    return SomeClass(value$Value, a: a$Value);
  }

  @override
  Map<String, dynamic> toJson(SomeClass model) =>
      {'value': model.value, if (model.a != null) 'a': model.a!};
}

class Model2Serializer extends js.GenericModelSerializer2<Model2> {
  Model2Serializer(js.JSerializerInterface jSerializer) : super(jSerializer);

  Model2Serializer.from(
      {required js.Serializer serializer, required js.Serializer serializer2})
      : super.from(serializer: serializer, serializer2: serializer2);

  late final _Wrapper4_int_String_City_List_BranchSerializer =
      Wrapper4Serializer.from(
          serializer: _intSerializer,
          serializer2: _StringSerializer,
          serializer3: _CitySerializer,
          serializer4: _List_BranchSerializer);

  static const _intSerializer = js.PrimitiveSerializer<int>();

  static const _StringSerializer = js.PrimitiveSerializer<String>();

  static const _CitySerializer = CitySerializer();

  late final _List_BranchSerializer =
      js.ListSerializer<Branch>(_BranchSerializer);

  static const _BranchSerializer = BranchSerializer();

  late final _Wrapper2_T_numSerializer = Wrapper2Serializer.from(
      serializer: serializer!, serializer2: _numSerializer);

  static const _numSerializer = js.PrimitiveSerializer<num>();

  static const _LocationSerializer = LocationSerializer();

  late final _Wrapper_List_intSerializer =
      WrapperSerializer.from(serializer: _List_intSerializer);

  late final _List_intSerializer = js.ListSerializer<int>(_intSerializer);

  late final _Wrapper2_T_RSerializer = Wrapper2Serializer.from(
      serializer: serializer!, serializer2: serializer2!);

  static const _ColorSerializer = CustomColorSerializer();

  static const _M2Serializer = M2Serializer();

  static const jsonKeys = {
    'value',
    'wrapper',
    'name',
    'location',
    'is_right',
    'city',
    'value2',
    'hi',
    'extras',
    'locations',
    'v',
    'value3',
    'color'
  };

  @override
  M fromJsonGeneric<M extends Model2, T, R>(json) {
    final value$Json = json['value'];
    final Wrapper4<int, String, City, List<Branch>> value$Value =
        safe<Wrapper4<int, String, City, List<Branch>>>(
            call: () =>
                _Wrapper4_int_String_City_List_BranchSerializer.fromJsonGeneric<
                    Wrapper4<int, String, City, List<Branch>>,
                    int,
                    String,
                    City,
                    List<Branch>>(value$Json),
            jsonName: 'value',
            modelType: M);
    final wrapper$Json = json['wrapper'];
    final Wrapper2<T, num> wrapper$Value = safe<Wrapper2<T, num>>(
        call: () => jSerializer == null
            ? getGenericValue2<Wrapper2<T, num>, T, num>(
                wrapper$Json, _Wrapper2_T_numSerializer)
            : (jSerializer!.serializerOf<Wrapper2>()
                    as js.GenericModelSerializer2)
                .fromJsonGeneric<Wrapper2<T, num>, T, num>(wrapper$Json),
        jsonName: 'wrapper',
        modelType: M);
    final String name$Value = mapLookup(jsonName: 'name', json: json);
    final location$Json = json['location'];
    final Location location$Value = safe<Location>(
        call: () => _LocationSerializer.fromJson(location$Json),
        jsonName: 'location',
        modelType: M);
    final bool isRight$Value =
        mapLookup(jsonName: 'is_right', fieldName: 'isRight', json: json);
    final city$Json = json['city'];
    final City city$Value = safe<City>(
        call: () => _CitySerializer.fromJson(city$Json),
        jsonName: 'city',
        modelType: M);
    final value2$Json = json['value2'];
    final Wrapper<List<int>> value2$Value = safe<Wrapper<List<int>>>(
        call: () => _Wrapper_List_intSerializer.fromJsonGeneric<
            Wrapper<List<int>>, List<int>>(value2$Json),
        jsonName: 'value2',
        modelType: M);
    final hi$Json = json['hi'];
    final List<bool> hi$Value = safe<List<bool>>(
        call: () => List<bool>.from((hi$Json as List)),
        jsonName: 'hi',
        modelType: M);
    final extras$Json = json['extras'];
    final Map<String, dynamic> extras$Value = safe<Map<String, dynamic>>(
        call: () => Map<String, dynamic>.from((extras$Json as Map)),
        jsonName: 'extras',
        modelType: M);
    final locations$Json = json['locations'];
    final List<M2> locations$Value = safe<List<M2>>(
        call: () => List<M2>.from(
            (locations$Json as Iterable).map((e) => _M2Serializer.fromJson(e))),
        jsonName: 'locations',
        modelType: M);
    final v$Json = json['v'];
    final T v$Value = safe<T>(
        call: () => getGenericValue<T>(v$Json, serializer),
        jsonName: 'v',
        modelType: M);
    final value3$Json = json['value3'];
    final Wrapper2<T, R> value3$Value = safe<Wrapper2<T, R>>(
        call: () => jSerializer == null
            ? getGenericValue2<Wrapper2<T, R>, T, R>(
                value3$Json, _Wrapper2_T_RSerializer)
            : (jSerializer!.serializerOf<Wrapper2>()
                    as js.GenericModelSerializer2)
                .fromJsonGeneric<Wrapper2<T, R>, T, R>(value3$Json),
        jsonName: 'value3',
        modelType: M);
    final color$Json = json['color'];
    final Color? color$Value = safe<Color?>(
        call: () =>
            color$Json == null ? null : _ColorSerializer.fromJson(color$Json),
        jsonName: 'color',
        modelType: M);
    return (Model2<T, R>(value$Value,
        wrapper: wrapper$Value,
        name: name$Value,
        location: location$Value,
        isRight: isRight$Value,
        city: city$Value,
        value2: value2$Value,
        hi: hi$Value,
        extras: extras$Value,
        locations: locations$Value,
        v: v$Value,
        value3: value3$Value,
        color: color$Value) as M);
  }

  @override
  Map<String, dynamic> toJson(Model2 model) => {
        'value':
            _Wrapper4_int_String_City_List_BranchSerializer.toJson(model.value),
        'wrapper': jSerializer == null
            ? getGenericValueToJson(model.wrapper, _Wrapper2_T_numSerializer)
            : (jSerializer!.serializerOf<Wrapper2>()
                    as js.GenericModelSerializer2)
                .toJson(model.wrapper),
        'name': model.name,
        'location': _LocationSerializer.toJson(model.location),
        'is_right': model.isRight,
        'city': _CitySerializer.toJson(model.city),
        'value2': _Wrapper_List_intSerializer.toJson(model.value2),
        'hi': model.hi,
        'extras': model.extras,
        'locations':
            model.locations.map((e) => _M2Serializer.toJson(e)).toList(),
        'v': getGenericValueToJson(model.v, serializer),
        'value3': jSerializer == null
            ? getGenericValueToJson(model.value3, _Wrapper2_T_RSerializer)
            : (jSerializer!.serializerOf<Wrapper2>()
                    as js.GenericModelSerializer2)
                .toJson(model.value3),
        if (model.color != null) 'color': _ColorSerializer.toJson(model.color!)
      };
}

class M2Serializer extends js.ModelSerializer<M2> {
  const M2Serializer();

  static const jsonKeys = {'something'};

  @override
  M2 fromJson(json) {
    final String something$Value = mapLookup(jsonName: 'something', json: json);
    return M2(something$Value);
  }

  @override
  Map<String, dynamic> toJson(M2 model) => {'something': model.something};
}

class Wrapper4Serializer extends js.GenericModelSerializer4<Wrapper4> {
  Wrapper4Serializer(js.JSerializerInterface jSerializer) : super(jSerializer);

  Wrapper4Serializer.from(
      {required js.Serializer serializer,
      required js.Serializer serializer2,
      required js.Serializer serializer3,
      required js.Serializer serializer4})
      : super.from(
            serializer: serializer,
            serializer2: serializer2,
            serializer3: serializer3,
            serializer4: serializer4);

  static const _LocationSerializer = LocationSerializer();

  static const _CitySerializer = CitySerializer();

  static const jsonKeys = {'a', 'c', 'b', 'd', 'location', 'aaa'};

  @override
  M fromJsonGeneric<M extends Wrapper4, A, B, C, D>(json) {
    final a$Json = json['a'];
    final List<A?> a$Value = safe<List<A?>>(
        call: () => List<A?>.from(
            (a$Json as Iterable).map((e) => getGenericValue<A>(e, serializer))),
        jsonName: 'a',
        modelType: M);
    final c$Json = json['c'];
    final Map<String, C> c$Value = safe<Map<String, C>>(
        call: () => Map<String, C>.from((c$Json as Map).map((key, value) =>
            MapEntry(key, getGenericValue<C>(value, serializer3)))),
        jsonName: 'c',
        modelType: M);
    final b$Json = json['b'];
    final B? b$Value = safe<B?>(
        call: () =>
            b$Json == null ? null : getGenericValue<B?>(b$Json, serializer2),
        jsonName: 'b',
        modelType: M);
    final d$Json = json['d'];
    final D d$Value = safe<D>(
        call: () => getGenericValue<D>(d$Json, serializer4),
        jsonName: 'd',
        modelType: M);
    final location$Json = json['location'];
    final Location location$Value = safe<Location>(
        call: () => _LocationSerializer.fromJson(location$Json),
        jsonName: 'location',
        modelType: M);
    final aaa$Json = json['aaa'];
    final Map<String, City> aaa$Value = safe<Map<String, City>>(
        call: () => Map<String, City>.from((aaa$Json as Map).map(
            (key, value) => MapEntry(key, _CitySerializer.fromJson(value)))),
        jsonName: 'aaa',
        modelType: M);
    return (Wrapper4<A, B, C, D>(
        a: a$Value,
        c: c$Value,
        b: b$Value,
        d: d$Value,
        location: location$Value,
        aaa: aaa$Value) as M);
  }

  @override
  Map<String, dynamic> toJson(Wrapper4 model) => {
        'a': model.a.map((e) => getGenericValueToJson(e, serializer)).toList(),
        'c': model.c.map((key, value) =>
            MapEntry(key, getGenericValueToJson(value, serializer3))),
        if (model.b != null) 'b': getGenericValueToJson(model.b!, serializer2),
        'd': getGenericValueToJson(model.d, serializer4),
        'location': _LocationSerializer.toJson(model.location),
        'aaa': model.aaa
            .map((key, value) => MapEntry(key, _CitySerializer.toJson(value)))
      };
}

class Wrapper3Serializer extends js.GenericModelSerializer3<Wrapper3> {
  Wrapper3Serializer(js.JSerializerInterface jSerializer) : super(jSerializer);

  Wrapper3Serializer.from(
      {required js.Serializer serializer,
      required js.Serializer serializer2,
      required js.Serializer serializer3})
      : super.from(
            serializer: serializer,
            serializer2: serializer2,
            serializer3: serializer3);

  static const jsonKeys = {'a', 'c', 'b'};

  @override
  M fromJsonGeneric<M extends Wrapper3, A, B, C>(json) {
    final a$Json = json['a'];
    final List<A> a$Value = safe<List<A>>(
        call: () => List<A>.from(
            (a$Json as Iterable).map((e) => getGenericValue<A>(e, serializer))),
        jsonName: 'a',
        modelType: M);
    final c$Json = json['c'];
    final Map<String, C> c$Value = safe<Map<String, C>>(
        call: () => Map<String, C>.from((c$Json as Map).map((key, value) =>
            MapEntry(key, getGenericValue<C>(value, serializer3)))),
        jsonName: 'c',
        modelType: M);
    final b$Json = json['b'];
    final B? b$Value = safe<B?>(
        call: () =>
            b$Json == null ? null : getGenericValue<B?>(b$Json, serializer2),
        jsonName: 'b',
        modelType: M);
    return (Wrapper3<A, B, C>(a: a$Value, c: c$Value, b: b$Value) as M);
  }

  @override
  Map<String, dynamic> toJson(Wrapper3 model) => {
        'a': model.a.map((e) => getGenericValueToJson(e, serializer)).toList(),
        'c': model.c.map((key, value) =>
            MapEntry(key, getGenericValueToJson(value, serializer3))),
        if (model.b != null) 'b': getGenericValueToJson(model.b!, serializer2)
      };
}

class Wrapper2Serializer extends js.GenericModelSerializer2<Wrapper2> {
  Wrapper2Serializer(js.JSerializerInterface jSerializer) : super(jSerializer);

  Wrapper2Serializer.from(
      {required js.Serializer serializer, required js.Serializer serializer2})
      : super.from(serializer: serializer, serializer2: serializer2);

  static const jsonKeys = {'a', 'b'};

  @override
  M fromJsonGeneric<M extends Wrapper2, A, B>(json) {
    final a$Json = json['a'];
    final List<A> a$Value = safe<List<A>>(
        call: () => List<A>.from(
            (a$Json as Iterable).map((e) => getGenericValue<A>(e, serializer))),
        jsonName: 'a',
        modelType: M);
    final b$Json = json['b'];
    final B? b$Value = safe<B?>(
        call: () =>
            b$Json == null ? null : getGenericValue<B?>(b$Json, serializer2),
        jsonName: 'b',
        modelType: M);
    return (Wrapper2<A, B>(a: a$Value, b: b$Value) as M);
  }

  @override
  Map<String, dynamic> toJson(Wrapper2 model) => {
        'a': model.a.map((e) => getGenericValueToJson(e, serializer)).toList(),
        if (model.b != null) 'b': getGenericValueToJson(model.b!, serializer2)
      };
}

class WrapperSerializer extends js.GenericModelSerializer<Wrapper> {
  WrapperSerializer(js.JSerializerInterface jSerializer) : super(jSerializer);

  WrapperSerializer.from({required js.Serializer serializer})
      : super.from(serializer: serializer);

  static const jsonKeys = {'value', 'something_funnyy'};

  @override
  M fromJsonGeneric<M extends Wrapper, T>(json) {
    final value$Json = json['value'];
    final List<T> value$Value = safe<List<T>>(
        call: () => List<T>.from((value$Json as Iterable)
            .map((e) => getGenericValue<T>(e, serializer))),
        jsonName: 'value',
        modelType: M);
    final int somethingFunnyy$Value = mapLookup(
        jsonName: 'something_funnyy', fieldName: 'somethingFunnyy', json: json);
    return (Wrapper<T>(value$Value, somethingFunnyy$Value) as M);
  }

  @override
  Map<String, dynamic> toJson(Wrapper model) => {
        'value': model.value
            .map((e) => getGenericValueToJson(e, serializer))
            .toList(),
        'something_funnyy': model.somethingFunnyy
      };
}

class BranchSerializer extends js.ModelSerializer<Branch> {
  const BranchSerializer();

  static const _LocationSerializer = LocationSerializer();

  static const _CitySerializer = CitySerializer();

  static const jsonKeys = {
    'id',
    'name',
    'description',
    'location',
    'city',
    'phones',
    'emails'
  };

  @override
  Branch fromJson(json) {
    final int? id$Value = mapLookup(jsonName: 'id', json: json) ?? -1;
    final String name$Value = mapLookup(jsonName: 'name', json: json) ?? 'Ali';
    final String description$Value =
        mapLookup(jsonName: 'description', json: json);
    final location$Json = json['location'];
    final Location? location$Value = safe<Location?>(
        call: () => location$Json == null
            ? const Location(longitude: 'sdf', latitude: 'sdfdsf')
            : _LocationSerializer.fromJson(location$Json),
        jsonName: 'location');
    final city$Json = json['city'];
    final List<City>? city$Value = safe<List<City>?>(
        call: () => city$Json == null
            ? const []
            : List<City>.from((city$Json as Iterable)
                .map((e) => _CitySerializer.fromJson(e))),
        jsonName: 'city');
    final phones$Json = json['phones'];
    final List<String>? phones$Value = safe<List<String>?>(
        call: () => phones$Json == null
            ? const []
            : List<String>.from((phones$Json as List)),
        jsonName: 'phones');
    final emails$Json = json['emails'];
    final List<String>? emails$Value = safe<List<String>?>(
        call: () => emails$Json == null
            ? const []
            : List<String>.from((emails$Json as List)),
        jsonName: 'emails');
    return Branch(
        id: id$Value,
        name: name$Value,
        description: description$Value,
        location: location$Value,
        city: city$Value,
        phones: phones$Value,
        emails: emails$Value);
  }

  @override
  Map<String, dynamic> toJson(Branch model) => {
        if (model.id != null) 'id': model.id!,
        'name': model.name,
        'description': model.description,
        if (model.location != null)
          'location': _LocationSerializer.toJson(model.location!),
        if (model.city != null)
          'city': model.city!.map((e) => _CitySerializer.toJson(e)).toList(),
        if (model.phones != null) 'phones': model.phones!,
        if (model.emails != null) 'emails': model.emails!
      };
}

class ModelSerializer extends js.ModelSerializer<Model> {
  const ModelSerializer();

  static const jsonKeys = {'value'};

  @override
  Model fromJson(json) {
    final String value$Value = mapLookup(jsonName: 'value', json: json);
    return Model(value$Value);
  }

  @override
  Map<String, dynamic> toJson(Model model) => {'value': model.value};
}

class LocationSerializer extends js.ModelSerializer<Location> {
  const LocationSerializer();

  static const jsonKeys = {'longitude', 'latitude'};

  @override
  Location fromJson(json) {
    final String longitude$Value = mapLookup(jsonName: 'longitude', json: json);
    final String latitude$Value = mapLookup(jsonName: 'latitude', json: json);
    return Location(longitude: longitude$Value, latitude: latitude$Value);
  }

  @override
  Map<String, dynamic> toJson(Location model) =>
      {'longitude': model.longitude, 'latitude': model.latitude};
}

class CitySerializer extends js.ModelSerializer<City> {
  const CitySerializer();

  static const jsonKeys = {'id', 'name'};

  @override
  City fromJson(json) {
    final int id$Value = mapLookup(jsonName: 'id', json: json);
    final String name$Value = mapLookup(jsonName: 'name', json: json);
    return City(id: id$Value, name: name$Value);
  }

  @override
  Map<String, dynamic> toJson(City model) =>
      {'id': model.id, 'name': model.name};
}

void initializeJSerializer() {
  js.JSerializer.register<Color>(
      (_) => const CustomColorSerializer(), (Function f) => f<Color>());
  js.JSerializer.register<SomeClass>(
      (_) => const SomeClassSerializer(), (Function f) => f<SomeClass>());
  js.JSerializer.register<Brightness>((_) => const CustomBrightnessSerializer(),
      (Function f) => f<Brightness>());
  js.JSerializer.register<Model2>(
      (s) => Model2Serializer(s), <T, R>(Function f) => f<Model2<T, R>>());
  js.JSerializer.register<M2>(
      (_) => const M2Serializer(), (Function f) => f<M2>());
  js.JSerializer.register<Wrapper4>((s) => Wrapper4Serializer(s),
      <A, B, C, D>(Function f) => f<Wrapper4<A, B, C, D>>());
  js.JSerializer.register<Wrapper3>((s) => Wrapper3Serializer(s),
      <A, B, C>(Function f) => f<Wrapper3<A, B, C>>());
  js.JSerializer.register<Wrapper2>(
      (s) => Wrapper2Serializer(s), <A, B>(Function f) => f<Wrapper2<A, B>>());
  js.JSerializer.register<Wrapper>(
      (s) => WrapperSerializer(s), <T>(Function f) => f<Wrapper<T>>());
  js.JSerializer.register<Branch>(
      (_) => const BranchSerializer(), (Function f) => f<Branch>());
  js.JSerializer.register<Model>(
      (_) => const ModelSerializer(), (Function f) => f<Model>());
  js.JSerializer.register<Location>(
      (_) => const LocationSerializer(), (Function f) => f<Location>());
  js.JSerializer.register<City>(
      (_) => const CitySerializer(), (Function f) => f<City>());
}
