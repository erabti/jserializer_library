// GENERATED CODE. DO NOT MODIFY. Generated by JSerializerGenerator.

// ignore_for_file: type=lint,prefer-match-file-name,newline-before-return,prefer-trailing-comma,long-method,STRICT_RAW_TYPE,return_of_invalid_type_from_closure

// **************************************************************************
// JSerializer: Serialization Done Right
// **************************************************************************

import 'package:jserializer/jserializer.dart' as js;
import 'package:example2/model/model.dart';

class SomeModelSerializer extends js.ModelSerializer<SomeModel> {
  const SomeModelSerializer({super.jSerializer});

  static const jsonKeys = {
    'field1',
    'field2',
  };

  @override
  SomeModel fromJson(json) {
    final field1$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['field1']),
      jsonKey: 'field1',
    );
    final field2$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['field2']),
      jsonKey: 'field2',
    );
    final extras$Value = Map<String, dynamic>.from(json)
      ..removeWhere((
        key,
        _,
      ) =>
          jsonKeys.contains(key));
    return SomeModel(
      field1: field1$Value,
      field2: field2$Value,
      extras: extras$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(SomeModel model) => model.extras
    ..addAll({
      'field1': model.field1,
      'field2': model.field2,
    });
}

class SomeGenericModelSerializer
    extends js.GenericModelSerializer<SomeGenericModel> {
  SomeGenericModelSerializer({super.jSerializer});

  static const jsonKeys = {'value'};

  SomeGenericModel<T> decode<T>(Map json) {
    final value$Value = safeLookup<T>(
      call: () => jSerializer.fromJson<T>(json['value']),
      jsonKey: 'value',
    );
    final extras$Value = Map<String, dynamic>.from(json)
      ..removeWhere((
        key,
        _,
      ) =>
          jsonKeys.contains(key));
    return SomeGenericModel<T>(
      value: value$Value,
      extras: extras$Value,
    );
  }

  @override
  Function get decoder => decode;

  @override
  Map<String, dynamic> toJson(SomeGenericModel model) =>
      model.extras..addAll({'value': jSerializer.toJson(model.value)});
}

class SomeModelMocker extends js.JModelMocker<SomeModel> {
  const SomeModelMocker({super.jSerializer});

  @override
  SomeModel createMock({js.JMockerContext? context}) {
    final field1$Value = jSerializer.createMock<String>(context: context);
    final field2$Value = jSerializer.createMock<String>(context: context);
    return SomeModel(
      field1: field1$Value,
      field2: field2$Value,
    );
  }
}

class SomeGenericModelMocker extends js.JGenericMocker<SomeGenericModel> {
  SomeGenericModelMocker({super.jSerializer});

  SomeGenericModel<T> mock<T>({js.JMockerContext? context}) {
    final value$Value = jSerializer.createMock<T>(context: context);
    return SomeGenericModel<T>(value: value$Value);
  }

  @override
  Function get mocker => mock;
}

void initializeJSerializer({js.JSerializerInterface? jSerializer}) {
  final instance = jSerializer ?? js.JSerializer.i;
  instance.register<SomeModel>(
    (s) => SomeModelSerializer(jSerializer: s),
    (Function f) => f<SomeModel>(),
    mockFactory: (s) => SomeModelMocker(jSerializer: s),
  );
  instance.register<SomeGenericModel>(
    (s) => SomeGenericModelSerializer(jSerializer: s),
    <T>(Function f) => f<SomeGenericModel<T>>(),
    mockFactory: (s) => SomeGenericModelMocker(jSerializer: s),
  );
  instance.register<SomeCustomModel>(
    (s) => SomeCustomModelMocker(jSerializer: s),
    (Function f) => f<SomeCustomModel>(),
    mockFactory: (s) => SomeCustomModelMocker(jSerializer: s),
  );
}
