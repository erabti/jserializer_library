// GENERATED CODE. DO NOT MODIFY. Generated by JSerializerGenerator.

// ignore_for_file: type=lint,unnecessary_import,return_of_invalid_type_from_closure,STRICT_RAW_TYPE,prefer-match-file-name,newline-before-return,prefer-trailing-comma,long-method

// **************************************************************************
// JSerializer: Serialization Done Right
// **************************************************************************

import 'package:jserializer/jserializer.dart' as js;
import 'package:example2/model/union.dart';
import 'package:example2/model/model.dart';

class SectionLayoutVListSerializer
    extends js.ModelSerializer<SectionLayoutVList> {
  const SectionLayoutVListSerializer({super.jSerializer});

  static const jsonKeys = {'shape'};

  @override
  SectionLayoutVList fromJson(json) {
    final shape$Value = safeLookup<DynamicItemShape?>(
      call: () => jSerializer.fromJson<DynamicItemShape?>(json['shape']),
      jsonKey: 'shape',
    );
    return SectionLayoutVList(shape: shape$Value);
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutVList model) => {
        'shape': jSerializer.toJson(model.shape),
        'type': 'vList',
      };
}

class SectionLayoutHListSerializer
    extends js.ModelSerializer<SectionLayoutHList> {
  const SectionLayoutHListSerializer({super.jSerializer});

  static const jsonKeys = {'shape'};

  @override
  SectionLayoutHList fromJson(json) {
    final shape$Value = safeLookup<DynamicItemShape?>(
      call: () => jSerializer.fromJson<DynamicItemShape?>(json['shape']),
      jsonKey: 'shape',
    );
    return SectionLayoutHList(shape: shape$Value);
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutHList model) => {
        'shape': jSerializer.toJson(model.shape),
        'type': 'hList',
      };
}

class SectionLayoutGridViewSerializer
    extends js.ModelSerializer<SectionLayoutGridView> {
  const SectionLayoutGridViewSerializer({super.jSerializer});

  static const jsonKeys = {'shape'};

  @override
  SectionLayoutGridView fromJson(json) {
    final shape$Value = safeLookup<DynamicItemShape?>(
      call: () => jSerializer.fromJson<DynamicItemShape?>(json['shape']),
      jsonKey: 'shape',
    );
    return SectionLayoutGridView(shape: shape$Value);
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutGridView model) => {
        'shape': jSerializer.toJson(model.shape),
        'type': 'gridView',
      };
}

class SectionLayoutGridPatternSerializer
    extends js.ModelSerializer<SectionLayoutGridPattern> {
  const SectionLayoutGridPatternSerializer({super.jSerializer});

  static const jsonKeys = {
    'shape',
    'pattern',
  };

  @override
  SectionLayoutGridPattern fromJson(json) {
    final shape$Value = safeLookup<DynamicItemShape?>(
      call: () => jSerializer.fromJson<DynamicItemShape?>(json['shape']),
      jsonKey: 'shape',
    );
    final pattern$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['pattern']),
      jsonKey: 'pattern',
    );
    return SectionLayoutGridPattern(
      shape: shape$Value,
      pattern: pattern$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutGridPattern model) => {
        'shape': jSerializer.toJson(model.shape),
        'pattern': model.pattern,
        'type': 'gridPattern',
      };
}

class SectionLayoutCarouselSerializer
    extends js.ModelSerializer<SectionLayoutCarousel> {
  const SectionLayoutCarouselSerializer({super.jSerializer});

  static const jsonKeys = {'shape'};

  @override
  SectionLayoutCarousel fromJson(json) {
    final shape$Value = safeLookup<DynamicItemShape?>(
      call: () => jSerializer.fromJson<DynamicItemShape?>(json['shape']),
      jsonKey: 'shape',
    );
    return SectionLayoutCarousel(shape: shape$Value);
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutCarousel model) => {
        'shape': jSerializer.toJson(model.shape),
        'type': 'carousel',
      };
}

class SectionLayoutUnknownSerializer
    extends js.ModelSerializer<SectionLayoutUnknown> {
  const SectionLayoutUnknownSerializer({super.jSerializer});

  static const jsonKeys = {};

  @override
  SectionLayoutUnknown fromJson(json) {
    return SectionLayoutUnknown();
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutUnknown model) =>
      {'type': 'unknown'};
}

class SectionLayoutSerializer extends js.ModelSerializer<SectionLayout> {
  const SectionLayoutSerializer({super.jSerializer});

  @override
  SectionLayout fromJson(json) {
    final type = json['type'];
    if (type is! String) {
      throw Exception(
        'The json field of type named (type) that was passed'
        'using fromJson of model SectionLayout) is not a String!\actual value: $type',
      );
    }
    switch (type) {
      case 'vList':
        return jSerializer.fromJson<SectionLayoutVList>(json);
      case 'hList':
        return jSerializer.fromJson<SectionLayoutHList>(json);
      case 'gridView':
        return jSerializer.fromJson<SectionLayoutGridView>(json);
      case 'gridPattern':
        return jSerializer.fromJson<SectionLayoutGridPattern>(json);
      case 'carousel':
        return jSerializer.fromJson<SectionLayoutCarousel>(json);
      default:
        return SectionLayoutUnknown();
    }
  }

  @override
  Map<String, dynamic> toJson(SectionLayout model) {
    if (model is SectionLayoutVList) {
      return {
        'type': 'vList',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    if (model is SectionLayoutHList) {
      return {
        'type': 'hList',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    if (model is SectionLayoutGridView) {
      return {
        'type': 'gridView',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    if (model is SectionLayoutGridPattern) {
      return {
        'type': 'gridPattern',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    if (model is SectionLayoutCarousel) {
      return {
        'type': 'carousel',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    if (model is SectionLayoutUnknown) {
      return {
        'type': 'unknown',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    throw Exception('Unknown type of union value: $model');
  }
}

class DynamicItemShapeSerializer
    extends js.CustomModelSerializer<DynamicItemShape, String> {
  const DynamicItemShapeSerializer({super.jSerializer});

  @override
  DynamicItemShape fromJson(String json) {
    if (json == 'circle') return DynamicItemShape.circle;

    if (json == 'undefined') return DynamicItemShape.undefined;

    throw Exception(
      'JSerializationException in Enum of type $DynamicItemShape '
      'Unknown enum value: $json',
    );
  }

  @override
  String toJson(DynamicItemShape model) {
    switch (model) {
      case DynamicItemShape.circle:
        return 'circle';

      case DynamicItemShape.undefined:
        return 'undefined';
    }
  }
}

class SomeModelSerializer extends js.ModelSerializer<SomeModel> {
  const SomeModelSerializer({super.jSerializer});

  static const jsonKeys = {
    'field1',
    'field2',
    'field3',
    'field4',
  };

  @override
  SomeModel fromJson(json) {
    final field1$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['field1']),
      jsonKey: 'field1',
    );
    final field2$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['field2']),
      jsonKey: 'field2',
    );
    final field3$Value = safeLookup<double?>(
      call: () => jSerializer.fromJson<double?>(json['field3']),
      jsonKey: 'field3',
    );
    final field4$Value = safeLookup<int?>(
      call: () => jSerializer.fromJson<int?>(json['field4']),
      jsonKey: 'field4',
    );
    final extras$Value = Map<String, dynamic>.from(json)
      ..removeWhere((
        key,
        _,
      ) =>
          jsonKeys.contains(key));
    return SomeModel(
      field1: field1$Value,
      field2: field2$Value,
      field3: field3$Value,
      field4: field4$Value,
      extras: extras$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(SomeModel model) => Map.of(model.extras)
    ..addAll({
      'field1': model.field1,
      'field2': model.field2,
      'field3': model.field3,
      'field4': model.field4,
    });
}

class SomeGenericModelSerializer
    extends js.GenericModelSerializer<SomeGenericModel> {
  SomeGenericModelSerializer({super.jSerializer});

  static const jsonKeys = {'value'};

  SomeGenericModel<T> decode<T>(Map json) {
    final value$Value = safeLookup<T>(
      call: () => jSerializer.fromJson<T>(json['value']),
      jsonKey: 'value',
    );
    final extras$Value = Map<String, dynamic>.from(json)
      ..removeWhere((
        key,
        _,
      ) =>
          jsonKeys.contains(key));
    return SomeGenericModel<T>(
      value: value$Value,
      extras: extras$Value,
    );
  }

  @override
  Function get decoder => decode;

  @override
  Map<String, dynamic> toJson(SomeGenericModel model) =>
      Map.of(model.extras)..addAll({'value': jSerializer.toJson(model.value)});
}

class SomeEnumSerializer extends js.CustomModelSerializer<SomeEnum, String> {
  const SomeEnumSerializer({super.jSerializer});

  @override
  SomeEnum fromJson(String json) {
    if (json == 'someValue1') return SomeEnum.someValue1;

    if (json == 'someValue2') return SomeEnum.someValue2;

    throw Exception(
      'JSerializationException in Enum of type $SomeEnum '
      'Unknown enum value: $json',
    );
  }

  @override
  String toJson(SomeEnum model) {
    switch (model) {
      case SomeEnum.someValue1:
        return 'someValue1';

      case SomeEnum.someValue2:
        return 'someValue2';
    }
  }
}

class SectionLayoutVListMocker extends js.JModelMocker<SectionLayoutVList> {
  const SectionLayoutVListMocker({super.jSerializer});

  @override
  SectionLayoutVList createMock([js.JMockerContext? context]) {
    final shape$Value =
        jSerializer.createMock<DynamicItemShape?>(context: context);
    return SectionLayoutVList(shape: shape$Value);
  }
}

class SectionLayoutHListMocker extends js.JModelMocker<SectionLayoutHList> {
  const SectionLayoutHListMocker({super.jSerializer});

  @override
  SectionLayoutHList createMock([js.JMockerContext? context]) {
    final shape$Value =
        jSerializer.createMock<DynamicItemShape?>(context: context);
    return SectionLayoutHList(shape: shape$Value);
  }
}

class SectionLayoutGridViewMocker
    extends js.JModelMocker<SectionLayoutGridView> {
  const SectionLayoutGridViewMocker({super.jSerializer});

  @override
  SectionLayoutGridView createMock([js.JMockerContext? context]) {
    final shape$Value =
        jSerializer.createMock<DynamicItemShape?>(context: context);
    return SectionLayoutGridView(shape: shape$Value);
  }
}

class SectionLayoutGridPatternMocker
    extends js.JModelMocker<SectionLayoutGridPattern> {
  const SectionLayoutGridPatternMocker({super.jSerializer});

  @override
  SectionLayoutGridPattern createMock([js.JMockerContext? context]) {
    final shape$Value =
        jSerializer.createMock<DynamicItemShape?>(context: context);
    final pattern$Value = jSerializer.createMock<String?>(context: context);
    return SectionLayoutGridPattern(
      shape: shape$Value,
      pattern: pattern$Value,
    );
  }
}

class SectionLayoutCarouselMocker
    extends js.JModelMocker<SectionLayoutCarousel> {
  const SectionLayoutCarouselMocker({super.jSerializer});

  @override
  SectionLayoutCarousel createMock([js.JMockerContext? context]) {
    final shape$Value =
        jSerializer.createMock<DynamicItemShape?>(context: context);
    return SectionLayoutCarousel(shape: shape$Value);
  }
}

class SectionLayoutUnknownMocker extends js.JModelMocker<SectionLayoutUnknown> {
  const SectionLayoutUnknownMocker({super.jSerializer});

  @override
  SectionLayoutUnknown createMock([js.JMockerContext? context]) {
    return SectionLayoutUnknown();
  }
}

class SectionLayoutMocker extends js.JCustomMocker<SectionLayout> {
  const SectionLayoutMocker({super.jSerializer});

  @override
  SectionLayout createMock([js.JMockerContext? context]) {
    return optionallyRandomizedValueFromListLazy(
      context,
      [
        () => jSerializer.createMock<SectionLayoutVList>(context: context),
        () => jSerializer.createMock<SectionLayoutHList>(context: context),
        () => jSerializer.createMock<SectionLayoutGridView>(context: context),
        () =>
            jSerializer.createMock<SectionLayoutGridPattern>(context: context),
        () => jSerializer.createMock<SectionLayoutCarousel>(context: context),
        () => jSerializer.createMock<SectionLayoutUnknown>(context: context),
      ],
      fallback: () =>
          jSerializer.createMock<SectionLayoutUnknown>(context: context),
    );
  }
}

class DynamicItemShapeMocker extends js.JCustomMocker<DynamicItemShape> {
  const DynamicItemShapeMocker({super.jSerializer});

  @override
  DynamicItemShape createMock([js.JMockerContext? context]) {
    return optionallyRandomizedValueFromList(
      context,
      DynamicItemShape.values,
    );
  }
}

class SomeModelMocker extends js.JModelMocker<SomeModel> {
  const SomeModelMocker({super.jSerializer});

  static const _$field1_$StringMocker = js.StringMocker(language: 'ar');

  static const _$field2_$StringMocker = js.StringMocker(language: 'en');

  @override
  SomeModel createMock([js.JMockerContext? context]) {
    final field1$Value = _$field1_$StringMocker.createMock(context);
    final field2$Value = _$field2_$StringMocker.createMock(context);
    final field3$Value = jSerializer.createMock<double?>(context: context);
    final field4$Value = jSerializer.createMock<int?>(context: context);
    return SomeModel(
      field1: field1$Value,
      field2: field2$Value,
      field3: field3$Value,
      field4: field4$Value,
    );
  }
}

class SomeGenericModelMocker extends js.JGenericMocker<SomeGenericModel> {
  SomeGenericModelMocker({super.jSerializer});

  SomeGenericModel<T> mock<T>([js.JMockerContext? context]) {
    final value$Value = jSerializer.createMock<T>(context: context);
    return SomeGenericModel<T>(value: value$Value);
  }

  @override
  Function get mocker => mock;
}

class SomeEnumMocker extends js.JCustomMocker<SomeEnum> {
  const SomeEnumMocker({super.jSerializer});

  @override
  SomeEnum createMock([js.JMockerContext? context]) {
    return optionallyRandomizedValueFromList(
      context,
      SomeEnum.values,
    );
  }
}

void initializeJSerializer({js.JSerializerInterface? jSerializer}) {
  final instance = jSerializer ?? js.JSerializer.i;
  instance.register<SectionLayoutVList>(
    (s) => SectionLayoutVListSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutVList>(),
    mockFactory: (s) => SectionLayoutVListMocker(jSerializer: s),
  );
  instance.register<SectionLayoutHList>(
    (s) => SectionLayoutHListSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutHList>(),
    mockFactory: (s) => SectionLayoutHListMocker(jSerializer: s),
  );
  instance.register<SectionLayoutGridView>(
    (s) => SectionLayoutGridViewSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutGridView>(),
    mockFactory: (s) => SectionLayoutGridViewMocker(jSerializer: s),
  );
  instance.register<SectionLayoutGridPattern>(
    (s) => SectionLayoutGridPatternSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutGridPattern>(),
    mockFactory: (s) => SectionLayoutGridPatternMocker(jSerializer: s),
  );
  instance.register<SectionLayoutCarousel>(
    (s) => SectionLayoutCarouselSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutCarousel>(),
    mockFactory: (s) => SectionLayoutCarouselMocker(jSerializer: s),
  );
  instance.register<SectionLayoutUnknown>(
    (s) => SectionLayoutUnknownSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutUnknown>(),
    mockFactory: (s) => SectionLayoutUnknownMocker(jSerializer: s),
  );
  instance.register<SectionLayout>(
    (s) => SectionLayoutSerializer(jSerializer: s),
    (Function f) => f<SectionLayout>(),
    mockFactory: (s) => SectionLayoutMocker(jSerializer: s),
  );
  instance.register<DynamicItemShape>(
    (s) => DynamicItemShapeSerializer(jSerializer: s),
    (Function f) => f<DynamicItemShape>(),
    mockFactory: (s) => DynamicItemShapeMocker(jSerializer: s),
  );
  instance.register<SomeModel>(
    (s) => SomeModelSerializer(jSerializer: s),
    (Function f) => f<SomeModel>(),
    mockFactory: (s) => SomeModelMocker(jSerializer: s),
  );
  instance.register<SomeGenericModel>(
    (s) => SomeGenericModelSerializer(jSerializer: s),
    <T>(Function f) => f<SomeGenericModel<T>>(),
    mockFactory: (s) => SomeGenericModelMocker(jSerializer: s),
  );
  instance.register<SomeCustomModel>(
    (s) => SomeCustomModelCustomSerializer(jSerializer: s),
    (Function f) => f<SomeCustomModel>(),
    mockFactory: (s) => SomeCustomModelMocker(jSerializer: s),
  );
  instance.register<SomeEnum>(
    (s) => SomeEnumSerializer(jSerializer: s),
    (Function f) => f<SomeEnum>(),
    mockFactory: (s) => SomeEnumMocker(jSerializer: s),
  );
}
