// GENERATED CODE. DO NOT MODIFY. Generated by JSerializerGenerator.

// ignore_for_file: type=lint,unnecessary_import,deprecated_member_use_from_same_package,return_of_invalid_type_from_closure,STRICT_RAW_TYPE,prefer-match-file-name,newline-before-return,prefer-trailing-comma,long-method

// **************************************************************************
// JSerializer: Serialization Done Right
// **************************************************************************

import 'package:jserializer/jserializer.dart' as js;
import 'package:example2/model/product.dart';
import 'package:example2/model/product_customization.dart';
import 'package:example2/model/union.dart';
import 'package:example2/model/complicated_model.dart';
import 'package:example2/model/model.dart';

class ProductSerializer extends js.ModelSerializer<Product> {
  const ProductSerializer({super.jSerializer});

  static const jsonKeys = {
    'id',
    'name',
    'price',
    'originalPrice',
    'featuredImage',
    'images',
    'vendor',
    'currency',
    'maxPurchaseQuantity',
    'service',
    'category',
    'discountRate',
    'isAvailable',
    'description',
    'tags',
    'barcode',
    'quantity',
    'variants',
    'shortUrl',
    'brand',
    'variantsAttributes',
    'attributes',
    'groupReference',
    'vendorId',
    'userSpecifics',
    'customizations',
  };

  @override
  Product fromJson(json) {
    final id$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['id']),
      jsonKey: 'id',
    );
    final name$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['name']),
      jsonKey: 'name',
    );
    final price$Value = safeLookup<Price?>(
      call: () => jSerializer.fromJson<Price?>(json['price']),
      jsonKey: 'price',
    );
    final originalPrice$Value = safeLookup<Price?>(
      call: () => jSerializer.fromJson<Price?>(json['originalPrice']),
      jsonKey: 'originalPrice',
    );
    final featuredImage$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['featuredImage']),
      jsonKey: 'featuredImage',
    );
    final images$Value = safeLookup<List<String>?>(
      call: () => jSerializer.fromJson<List<String>?>(json['images']),
      jsonKey: 'images',
    );
    final vendor$Value = safeLookup<Vendor?>(
      call: () => jSerializer.fromJson<Vendor?>(json['vendor']),
      jsonKey: 'vendor',
    );
    final currency$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['currency']),
      jsonKey: 'currency',
    );
    final maxPurchaseQuantity$Value = safeLookup<int?>(
      call: () => jSerializer.fromJson<int?>(json['maxPurchaseQuantity']),
      jsonKey: 'maxPurchaseQuantity',
    );
    final service$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['service']),
      jsonKey: 'service',
    );
    final category$Value = safeLookup<List<Category?>?>(
      call: () => jSerializer.fromJson<List<Category?>?>(json['category']),
      jsonKey: 'category',
    );
    final discountRate$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['discountRate']),
      jsonKey: 'discountRate',
    );
    final isAvailable$Value = safeLookup<bool?>(
      call: () => jSerializer.fromJson<bool?>(json['isAvailable']),
      jsonKey: 'isAvailable',
    );
    final description$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['description']),
      jsonKey: 'description',
    );
    final tags$Value = safeLookup<List<Tag>?>(
      call: () => jSerializer.fromJson<List<Tag>?>(json['tags']),
      jsonKey: 'tags',
    );
    final barcode$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['barcode']),
      jsonKey: 'barcode',
    );
    final quantity$Value = safeLookup<int?>(
      call: () => jSerializer.fromJson<int?>(json['quantity']),
      jsonKey: 'quantity',
    );
    final variants$Value = safeLookup<List<ProductVariant>?>(
      call: () => jSerializer.fromJson<List<ProductVariant>?>(json['variants']),
      jsonKey: 'variants',
    );
    final shortUrl$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['shortUrl']),
      jsonKey: 'shortUrl',
    );
    final brand$Value = safeLookup<Brand?>(
      call: () => jSerializer.fromJson<Brand?>(json['brand']),
      jsonKey: 'brand',
    );
    final variantsAttributes$Value = safeLookup<List<ProductAttribute>?>(
      call: () => jSerializer
          .fromJson<List<ProductAttribute>?>(json['variantsAttributes']),
      jsonKey: 'variantsAttributes',
    );
    final attributes$Value = safeLookup<List<ProductAttributeValue>?>(
      call: () => jSerializer
          .fromJson<List<ProductAttributeValue>?>(json['attributes']),
      jsonKey: 'attributes',
    );
    final groupReference$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['groupReference']),
      jsonKey: 'groupReference',
    );
    final vendorId$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['vendorId']),
      jsonKey: 'vendorId',
    );
    final userSpecifics$Value = safeLookup<ProductUserSpecific?>(
      call: () =>
          jSerializer.fromJson<ProductUserSpecific?>(json['userSpecifics']),
      jsonKey: 'userSpecifics',
    );
    final customizations$Value = safeLookup<List<ProductCustomization>?>(
      call: () => jSerializer
          .fromJson<List<ProductCustomization>?>(json['customizations']),
      jsonKey: 'customizations',
    );
    return Product(
      id: id$Value,
      name: name$Value,
      price: price$Value,
      originalPrice: originalPrice$Value,
      featuredImage: featuredImage$Value,
      images: images$Value,
      vendor: vendor$Value,
      currency: currency$Value,
      maxPurchaseQuantity: maxPurchaseQuantity$Value,
      service: service$Value,
      category: category$Value,
      discountRate: discountRate$Value,
      isAvailable: isAvailable$Value,
      description: description$Value,
      tags: tags$Value,
      barcode: barcode$Value,
      quantity: quantity$Value,
      variants: variants$Value,
      shortUrl: shortUrl$Value,
      brand: brand$Value,
      variantsAttributes: variantsAttributes$Value,
      attributes: attributes$Value,
      groupReference: groupReference$Value,
      vendorId: vendorId$Value,
      userSpecifics: userSpecifics$Value,
      customizations: customizations$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(Product model) => {
        'id': model.id,
        'name': model.name,
        'price': jSerializer.toJson(model.price),
        'originalPrice': jSerializer.toJson(model.originalPrice),
        'featuredImage': model.featuredImage,
        'images': jSerializer.toJson(model.images),
        'vendor': jSerializer.toJson(model.vendor),
        'currency': model.currency,
        'maxPurchaseQuantity': model.maxPurchaseQuantity,
        'service': model.service,
        'category': jSerializer.toJson(model.category),
        'discountRate': model.discountRate,
        'isAvailable': model.isAvailable,
        'description': model.description,
        'tags': jSerializer.toJson(model.tags),
        'barcode': model.barcode,
        'quantity': model.quantity,
        'variants': jSerializer.toJson(model.variants),
        'shortUrl': model.shortUrl,
        'brand': jSerializer.toJson(model.brand),
        'variantsAttributes': jSerializer.toJson(model.variantsAttributes),
        'attributes': jSerializer.toJson(model.attributes),
        'groupReference': model.groupReference,
        'vendorId': model.vendorId,
        'userSpecifics': jSerializer.toJson(model.userSpecifics),
        'customizations': jSerializer.toJson(model.customizations),
      };
}

class TagSerializer extends js.ModelSerializer<Tag> {
  const TagSerializer({super.jSerializer});

  static const jsonKeys = {
    'key',
    'title',
    'subTitle',
    'featuredImage',
  };

  @override
  Tag fromJson(json) {
    final key$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['key']),
      jsonKey: 'key',
    );
    final title$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['title']),
      jsonKey: 'title',
    );
    final subTitle$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['subTitle']),
      jsonKey: 'subTitle',
    );
    final featuredImage$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['featuredImage']),
      jsonKey: 'featuredImage',
    );
    return Tag(
      key: key$Value,
      title: title$Value,
      subTitle: subTitle$Value,
      featuredImage: featuredImage$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(Tag model) => {
        'key': model.key,
        'title': model.title,
        'subTitle': model.subTitle,
        'featuredImage': model.featuredImage,
      };
}

class VendorSerializer extends js.ModelSerializer<Vendor> {
  const VendorSerializer({super.jSerializer});

  static const jsonKeys = {
    'id',
    'name',
    'banner',
    'featuredImage',
    'images',
    'category',
    'service',
    'isOpen',
    'partnerSupportNumber',
    'minimumOrderAmount',
  };

  @override
  Vendor fromJson(json) {
    final id$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['id']),
      jsonKey: 'id',
    );
    final name$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['name']),
      jsonKey: 'name',
    );
    final banner$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['banner']),
      jsonKey: 'banner',
    );
    final featuredImage$Value = safeLookup<String?>(
      call: () => jSerializer
          .fromJson<String?>(json['featuredImage'] ?? json['image_url']),
      jsonKey: 'featuredImage',
    );
    final images$Value = safeLookup<List<String>?>(
      call: () => jSerializer.fromJson<List<String>?>(json['images']),
      jsonKey: 'images',
    );
    final category$Value = safeLookup<Category?>(
      call: () => jSerializer.fromJson<Category?>(json['category']),
      jsonKey: 'category',
    );
    final service$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['service']),
      jsonKey: 'service',
    );
    final isOpen$Value = safeLookup<bool?>(
      call: () => jSerializer.fromJson<bool?>(json['isOpen']),
      jsonKey: 'isOpen',
    );
    final partnerSupportNumber$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['partnerSupportNumber']),
      jsonKey: 'partnerSupportNumber',
    );
    final minimumOrderAmount$Value = safeLookup<Price?>(
      call: () => jSerializer.fromJson<Price?>(json['minimumOrderAmount']),
      jsonKey: 'minimumOrderAmount',
    );
    return Vendor(
      id: id$Value,
      name: name$Value,
      banner: banner$Value,
      featuredImage: featuredImage$Value,
      images: images$Value,
      category: category$Value,
      service: service$Value,
      isOpen: isOpen$Value,
      partnerSupportNumber: partnerSupportNumber$Value,
      minimumOrderAmount: minimumOrderAmount$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(Vendor model) => {
        if (model.id != null) 'id': model.id!,
        if (model.name != null) 'name': model.name!,
        if (model.banner != null) 'banner': model.banner!,
        if (model.featuredImage != null) 'featuredImage': model.featuredImage!,
        'images': jSerializer.toJson(model.images),
        if (model.category != null)
          'category': jSerializer.toJson(model.category!),
        if (model.service != null) 'service': model.service!,
        if (model.isOpen != null) 'isOpen': model.isOpen!,
        if (model.partnerSupportNumber != null)
          'partnerSupportNumber': model.partnerSupportNumber!,
        if (model.minimumOrderAmount != null)
          'minimumOrderAmount': jSerializer.toJson(model.minimumOrderAmount!),
      };
}

class CategorySerializer extends js.ModelSerializer<Category> {
  const CategorySerializer({super.jSerializer});

  static const jsonKeys = {
    'id',
    'banner',
    'service',
    'featuredImage',
    'images',
    'name',
  };

  @override
  Category fromJson(json) {
    final id$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['id']),
      jsonKey: 'id',
    );
    final banner$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['banner']),
      jsonKey: 'banner',
    );
    final service$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['service']),
      jsonKey: 'service',
    );
    final featuredImage$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['featuredImage']),
      jsonKey: 'featuredImage',
    );
    final images$Value = safeLookup<List<String>?>(
      call: () => jSerializer.fromJson<List<String>?>(json['images']),
      jsonKey: 'images',
    );
    final name$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['name']),
      jsonKey: 'name',
    );
    return Category(
      id: id$Value,
      banner: banner$Value,
      service: service$Value,
      featuredImage: featuredImage$Value,
      images: images$Value,
      name: name$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(Category model) => {
        'id': model.id,
        'banner': model.banner,
        'service': model.service,
        'featuredImage': model.featuredImage,
        'images': jSerializer.toJson(model.images),
        'name': model.name,
      };
}

class ProductUserSpecificSerializer
    extends js.ModelSerializer<ProductUserSpecific> {
  const ProductUserSpecificSerializer({super.jSerializer});

  static const jsonKeys = {
    'isFavorite',
    'cartQuantity',
  };

  @override
  ProductUserSpecific fromJson(json) {
    final isFavorite$Value = safeLookup<bool?>(
      call: () => jSerializer.fromJson<bool?>(json['isFavorite']),
      jsonKey: 'isFavorite',
    );
    final cartQuantity$Value = safeLookup<int?>(
      call: () => jSerializer.fromJson<int?>(json['cartQuantity']),
      jsonKey: 'cartQuantity',
    );
    return ProductUserSpecific(
      isFavorite: isFavorite$Value,
      cartQuantity: cartQuantity$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(ProductUserSpecific model) => {
        'isFavorite': model.isFavorite,
        'cartQuantity': model.cartQuantity,
      };
}

class ProductAttributeSerializer extends js.ModelSerializer<ProductAttribute> {
  const ProductAttributeSerializer({super.jSerializer});

  static const jsonKeys = {
    'id',
    'name',
    'values',
  };

  @override
  ProductAttribute fromJson(json) {
    final id$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['id']),
      jsonKey: 'id',
    );
    final name$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['name']),
      jsonKey: 'name',
    );
    final values$Value = safeLookup<List<ProductAttributeValue>?>(
      call: () =>
          jSerializer.fromJson<List<ProductAttributeValue>?>(json['values']),
      jsonKey: 'values',
    );
    return ProductAttribute(
      id: id$Value,
      name: name$Value,
      values: values$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(ProductAttribute model) => {
        'id': model.id,
        'name': model.name,
        'values': jSerializer.toJson(model.values),
      };
}

class ProductAttributeValueSerializer
    extends js.ModelSerializer<ProductAttributeValue> {
  const ProductAttributeValueSerializer({super.jSerializer});

  static const jsonKeys = {
    'id',
    'name',
    'color',
    'featuredImage',
  };

  @override
  ProductAttributeValue fromJson(json) {
    final id$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['id']),
      jsonKey: 'id',
    );
    final name$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['name']),
      jsonKey: 'name',
    );
    final color$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['color']),
      jsonKey: 'color',
    );
    final featuredImage$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['featuredImage']),
      jsonKey: 'featuredImage',
    );
    return ProductAttributeValue(
      id: id$Value,
      name: name$Value,
      color: color$Value,
      featuredImage: featuredImage$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(ProductAttributeValue model) => {
        'id': model.id,
        'name': model.name,
        'color': model.color,
        'featuredImage': model.featuredImage,
      };
}

class BrandSerializer extends js.ModelSerializer<Brand> {
  const BrandSerializer({super.jSerializer});

  static const jsonKeys = {
    'name',
    'logo',
  };

  @override
  Brand fromJson(json) {
    final name$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['name']),
      jsonKey: 'name',
    );
    final logo$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['logo']),
      jsonKey: 'logo',
    );
    return Brand(
      name: name$Value,
      logo: logo$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(Brand model) => {
        'name': model.name,
        'logo': model.logo,
      };
}

class ProductVariantSerializer extends js.ModelSerializer<ProductVariant> {
  const ProductVariantSerializer({super.jSerializer});

  static const jsonKeys = {
    'id',
    'name',
    'price',
    'featuredImage',
    'images',
    'vendor',
    'currency',
    'maxPurchaseQuantity',
    'service',
    'category',
    'originalPrice',
    'discountRate',
    'isAvailable',
    'description',
    'tags',
    'barcode',
    'quantity',
    'shortUrl',
    'brand',
    'variantsAttributes',
    'attributes',
    'userSpecifics',
    'vendorId',
  };

  @override
  ProductVariant fromJson(json) {
    final id$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['id']),
      jsonKey: 'id',
    );
    final name$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['name']),
      jsonKey: 'name',
    );
    final price$Value = safeLookup<Price?>(
      call: () => jSerializer.fromJson<Price?>(json['price']),
      jsonKey: 'price',
    );
    final featuredImage$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['featuredImage']),
      jsonKey: 'featuredImage',
    );
    final images$Value = safeLookup<List<String>?>(
      call: () => jSerializer.fromJson<List<String>?>(json['images']),
      jsonKey: 'images',
    );
    final vendor$Value = safeLookup<Vendor?>(
      call: () => jSerializer.fromJson<Vendor?>(json['vendor']),
      jsonKey: 'vendor',
    );
    final currency$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['currency']),
      jsonKey: 'currency',
    );
    final maxPurchaseQuantity$Value = safeLookup<int?>(
      call: () => jSerializer.fromJson<int?>(json['maxPurchaseQuantity']),
      jsonKey: 'maxPurchaseQuantity',
    );
    final service$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['service']),
      jsonKey: 'service',
    );
    final category$Value = safeLookup<List<Category?>?>(
      call: () => jSerializer.fromJson<List<Category?>?>(json['category']),
      jsonKey: 'category',
    );
    final originalPrice$Value = safeLookup<Price?>(
      call: () => jSerializer.fromJson<Price?>(json['originalPrice']),
      jsonKey: 'originalPrice',
    );
    final discountRate$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['discountRate']),
      jsonKey: 'discountRate',
    );
    final isAvailable$Value = safeLookup<bool?>(
      call: () => jSerializer.fromJson<bool?>(json['isAvailable']),
      jsonKey: 'isAvailable',
    );
    final description$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['description']),
      jsonKey: 'description',
    );
    final tags$Value = safeLookup<List<Tag>?>(
      call: () => jSerializer.fromJson<List<Tag>?>(json['tags']),
      jsonKey: 'tags',
    );
    final barcode$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['barcode']),
      jsonKey: 'barcode',
    );
    final quantity$Value = safeLookup<int?>(
      call: () => jSerializer.fromJson<int?>(json['quantity']),
      jsonKey: 'quantity',
    );
    final shortUrl$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['shortUrl']),
      jsonKey: 'shortUrl',
    );
    final brand$Value = safeLookup<Brand?>(
      call: () => jSerializer.fromJson<Brand?>(json['brand']),
      jsonKey: 'brand',
    );
    final variantsAttributes$Value = safeLookup<List<ProductAttribute>?>(
      call: () => jSerializer
          .fromJson<List<ProductAttribute>?>(json['variantsAttributes']),
      jsonKey: 'variantsAttributes',
    );
    final attributes$Value = safeLookup<List<ProductAttributeValue>?>(
      call: () => jSerializer
          .fromJson<List<ProductAttributeValue>?>(json['attributes']),
      jsonKey: 'attributes',
    );
    final userSpecifics$Value = safeLookup<ProductUserSpecific?>(
      call: () =>
          jSerializer.fromJson<ProductUserSpecific?>(json['userSpecifics']),
      jsonKey: 'userSpecifics',
    );
    final vendorId$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['vendorId']),
      jsonKey: 'vendorId',
    );
    return ProductVariant(
      id: id$Value,
      name: name$Value,
      price: price$Value,
      featuredImage: featuredImage$Value,
      images: images$Value,
      vendor: vendor$Value,
      currency: currency$Value,
      maxPurchaseQuantity: maxPurchaseQuantity$Value,
      service: service$Value,
      category: category$Value,
      originalPrice: originalPrice$Value,
      discountRate: discountRate$Value,
      isAvailable: isAvailable$Value,
      description: description$Value,
      tags: tags$Value,
      barcode: barcode$Value,
      quantity: quantity$Value,
      shortUrl: shortUrl$Value,
      brand: brand$Value,
      variantsAttributes: variantsAttributes$Value,
      attributes: attributes$Value,
      userSpecifics: userSpecifics$Value,
      vendorId: vendorId$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(ProductVariant model) => {
        'id': model.id,
        'name': model.name,
        'price': jSerializer.toJson(model.price),
        'featuredImage': model.featuredImage,
        'images': jSerializer.toJson(model.images),
        'vendor': jSerializer.toJson(model.vendor),
        'currency': model.currency,
        'maxPurchaseQuantity': model.maxPurchaseQuantity,
        'service': model.service,
        'category': jSerializer.toJson(model.category),
        'originalPrice': jSerializer.toJson(model.originalPrice),
        'discountRate': model.discountRate,
        'isAvailable': model.isAvailable,
        'description': model.description,
        'tags': jSerializer.toJson(model.tags),
        'barcode': model.barcode,
        'quantity': model.quantity,
        'shortUrl': model.shortUrl,
        'brand': jSerializer.toJson(model.brand),
        'variantsAttributes': jSerializer.toJson(model.variantsAttributes),
        'attributes': jSerializer.toJson(model.attributes),
        'userSpecifics': jSerializer.toJson(model.userSpecifics),
        'vendorId': model.vendorId,
      };
}

class SectionLayoutVListSerializer
    extends js.ModelSerializer<SectionLayoutVList> {
  const SectionLayoutVListSerializer({super.jSerializer});

  static const jsonKeys = {'shape'};

  @override
  SectionLayoutVList fromJson(json) {
    final shape$Value = safeLookup<DynamicItemShape?>(
      call: () => jSerializer.fromJson<DynamicItemShape?>(json['shape']),
      jsonKey: 'shape',
    );
    return SectionLayoutVList(shape: shape$Value);
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutVList model) => {
        'shape': jSerializer.toJson(model.shape),
        'type': 'vList',
      };
}

class SectionLayoutHListSerializer
    extends js.ModelSerializer<SectionLayoutHList> {
  const SectionLayoutHListSerializer({super.jSerializer});

  static const jsonKeys = {'shape'};

  @override
  SectionLayoutHList fromJson(json) {
    final shape$Value = safeLookup<DynamicItemShape?>(
      call: () => jSerializer.fromJson<DynamicItemShape?>(json['shape']),
      jsonKey: 'shape',
    );
    return SectionLayoutHList(shape: shape$Value);
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutHList model) => {
        'shape': jSerializer.toJson(model.shape),
        'type': 'hList',
      };
}

class SectionLayoutGridViewSerializer
    extends js.ModelSerializer<SectionLayoutGridView> {
  const SectionLayoutGridViewSerializer({super.jSerializer});

  static const jsonKeys = {'shape'};

  @override
  SectionLayoutGridView fromJson(json) {
    final shape$Value = safeLookup<DynamicItemShape?>(
      call: () => jSerializer.fromJson<DynamicItemShape?>(json['shape']),
      jsonKey: 'shape',
    );
    return SectionLayoutGridView(shape: shape$Value);
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutGridView model) => {
        'shape': jSerializer.toJson(model.shape),
        'type': 'gridView',
      };
}

class SectionLayoutGridPatternSerializer
    extends js.ModelSerializer<SectionLayoutGridPattern> {
  const SectionLayoutGridPatternSerializer({super.jSerializer});

  static const jsonKeys = {
    'shape',
    'pattern',
  };

  @override
  SectionLayoutGridPattern fromJson(json) {
    final shape$Value = safeLookup<DynamicItemShape?>(
      call: () => jSerializer.fromJson<DynamicItemShape?>(json['shape']),
      jsonKey: 'shape',
    );
    final pattern$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['pattern']),
      jsonKey: 'pattern',
    );
    return SectionLayoutGridPattern(
      shape: shape$Value,
      pattern: pattern$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutGridPattern model) => {
        'shape': jSerializer.toJson(model.shape),
        'pattern': model.pattern,
        'type': 'gridPattern',
      };
}

class SectionLayoutCarouselSerializer
    extends js.ModelSerializer<SectionLayoutCarousel> {
  const SectionLayoutCarouselSerializer({super.jSerializer});

  static const jsonKeys = {'shape'};

  @override
  SectionLayoutCarousel fromJson(json) {
    final shape$Value = safeLookup<DynamicItemShape?>(
      call: () => jSerializer.fromJson<DynamicItemShape?>(json['shape']),
      jsonKey: 'shape',
    );
    return SectionLayoutCarousel(shape: shape$Value);
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutCarousel model) => {
        'shape': jSerializer.toJson(model.shape),
        'type': 'carousel',
      };
}

class SectionLayoutUnknownSerializer
    extends js.ModelSerializer<SectionLayoutUnknown> {
  const SectionLayoutUnknownSerializer({super.jSerializer});

  static const jsonKeys = {};

  @override
  SectionLayoutUnknown fromJson(json) {
    return SectionLayoutUnknown();
  }

  @override
  Map<String, dynamic> toJson(SectionLayoutUnknown model) =>
      {'type': 'unknown'};
}

class SectionLayoutSerializer extends js.ModelSerializer<SectionLayout> {
  const SectionLayoutSerializer({super.jSerializer});

  @override
  SectionLayout fromJson(json) {
    final type = json['type'];
    if (type is! String) {
      throw Exception(
        'The json field of type named (type) that was passed'
        'using fromJson of model SectionLayout) is not a String!\actual value: $type',
      );
    }
    switch (type) {
      case 'vList':
        return jSerializer.fromJson<SectionLayoutVList>(json);
      case 'hList':
        return jSerializer.fromJson<SectionLayoutHList>(json);
      case 'gridView':
        return jSerializer.fromJson<SectionLayoutGridView>(json);
      case 'gridPattern':
        return jSerializer.fromJson<SectionLayoutGridPattern>(json);
      case 'carousel':
        return jSerializer.fromJson<SectionLayoutCarousel>(json);
      default:
        return SectionLayoutUnknown();
    }
  }

  @override
  Map<String, dynamic> toJson(SectionLayout model) {
    if (model is SectionLayoutVList) {
      return {
        'type': 'vList',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    if (model is SectionLayoutHList) {
      return {
        'type': 'hList',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    if (model is SectionLayoutGridView) {
      return {
        'type': 'gridView',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    if (model is SectionLayoutGridPattern) {
      return {
        'type': 'gridPattern',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    if (model is SectionLayoutCarousel) {
      return {
        'type': 'carousel',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    if (model is SectionLayoutUnknown) {
      return {
        'type': 'unknown',
        ...(jSerializer.toJson(model) as Map<String, dynamic>),
      };
    }
    throw Exception('Unknown type of union value: $model');
  }
}

class DynamicItemShapeSerializer
    extends js.CustomModelSerializer<DynamicItemShape, String> {
  const DynamicItemShapeSerializer({super.jSerializer});

  @override
  DynamicItemShape fromJson(String json) {
    if (json == 'circle') return DynamicItemShape.circle;

    if (json == 'undefined') return DynamicItemShape.undefined;

    throw Exception(
      'JSerializationException in Enum of type $DynamicItemShape '
      'Unknown enum value: $json',
    );
  }

  @override
  String toJson(DynamicItemShape model) {
    switch (model) {
      case DynamicItemShape.circle:
        return 'circle';

      case DynamicItemShape.undefined:
        return 'undefined';
    }
  }
}

class SuperComplicatedModelSerializer
    extends js.GenericModelSerializer<SuperComplicatedModel> {
  SuperComplicatedModelSerializer({super.jSerializer});

  static const jsonKeys = {
    'value',
    'name',
    'age',
    'isAdult',
    'height',
    'friends',
    'map',
    'values',
    'mapValues',
    'nestedValues',
    'nestedMapValues',
    'nestedValuesMap',
    'nestedMapValuesMap',
    'nestedValuesMapList',
    'nestedMapValuesMapList',
    'nestedValuesMapListList',
    'nestedMapValuesMapListList',
    'nestedValuesMapListListList',
    'nestedMapValuesMapListListList',
    'nestedValuesMapListListListList',
    'nestedMapValuesMapListListListList',
    'nestedValuesMapListListListListList',
    'nestedMapValuesMapListListListListList',
    'nestedValuesMapListListListListListList',
    'nestedMapValuesMapListListListListListList',
    'nestedValuesMapListListListListListListList',
    'nestedMapValuesMapListListListListListListList',
    'nestedValuesMapListListListListListListListList',
    'nestedMapValuesMapListListListListListListListList',
    'nestedValuesMapListListListListListListListListList',
    'theModel',
    'theModel2',
    'theModel3',
    'theModel4',
    'theModel5',
    'theModels',
  };

  SuperComplicatedModel<T> decode<T>(Map json) {
    final value$Value = safeLookup<ComplicatedModel<ComplicatedModel<T>>>(
      call: () => jSerializer
          .fromJson<ComplicatedModel<ComplicatedModel<T>>>(json['value']),
      jsonKey: 'value',
    );
    final name$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['name']),
      jsonKey: 'name',
    );
    final age$Value = safeLookup<int>(
      call: () => jSerializer.fromJson<int>(json['age']),
      jsonKey: 'age',
    );
    final isAdult$Value = safeLookup<bool>(
      call: () => jSerializer.fromJson<bool>(json['isAdult']),
      jsonKey: 'isAdult',
    );
    final height$Value = safeLookup<double>(
      call: () => jSerializer.fromJson<double>(json['height']),
      jsonKey: 'height',
    );
    final friends$Value = safeLookup<List<String>>(
      call: () => jSerializer.fromJson<List<String>>(json['friends']),
      jsonKey: 'friends',
    );
    final map$Value = safeLookup<Map<String, dynamic>>(
      call: () => jSerializer.fromJson<Map<String, dynamic>>(json['map']),
      jsonKey: 'map',
    );
    final values$Value =
        safeLookup<List<ComplicatedModel<ComplicatedModel<T>>>>(
      call: () =>
          jSerializer.fromJson<List<ComplicatedModel<ComplicatedModel<T>>>>(
              json['values']),
      jsonKey: 'values',
    );
    final mapValues$Value =
        safeLookup<Map<String, ComplicatedModel<ComplicatedModel<T>>>>(
      call: () => jSerializer
          .fromJson<Map<String, ComplicatedModel<ComplicatedModel<T>>>>(
              json['mapValues']),
      jsonKey: 'mapValues',
    );
    final nestedValues$Value =
        safeLookup<List<List<ComplicatedModel<ComplicatedModel<T>>>>>(
      call: () => jSerializer
          .fromJson<List<List<ComplicatedModel<ComplicatedModel<T>>>>>(
              json['nestedValues']),
      jsonKey: 'nestedValues',
    );
    final nestedMapValues$Value =
        safeLookup<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>(
      call: () => jSerializer
          .fromJson<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>(
              json['nestedMapValues']),
      jsonKey: 'nestedMapValues',
    );
    final nestedValuesMap$Value =
        safeLookup<List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>(
      call: () => jSerializer
          .fromJson<List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>(
              json['nestedValuesMap']),
      jsonKey: 'nestedValuesMap',
    );
    final nestedMapValuesMap$Value = safeLookup<
        Map<String, List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>>(
      call: () => jSerializer.fromJson<
              Map<String,
                  List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>>(
          json['nestedMapValuesMap']),
      jsonKey: 'nestedMapValuesMap',
    );
    final nestedValuesMapList$Value = safeLookup<
        List<List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>>(
      call: () => jSerializer.fromJson<
              List<List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>>(
          json['nestedValuesMapList']),
      jsonKey: 'nestedValuesMapList',
    );
    final nestedMapValuesMapList$Value = safeLookup<
        Map<String, List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>>(
      call: () => jSerializer.fromJson<
              Map<String,
                  List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>>(
          json['nestedMapValuesMapList']),
      jsonKey: 'nestedMapValuesMapList',
    );
    final nestedValuesMapListList$Value = safeLookup<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              List<
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedValuesMapListList']),
      jsonKey: 'nestedValuesMapListList',
    );
    final nestedMapValuesMapListList$Value = safeLookup<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              Map<
                  String,
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedMapValuesMapListList']),
      jsonKey: 'nestedMapValuesMapListList',
    );
    final nestedValuesMapListListList$Value = safeLookup<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              List<
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedValuesMapListListList']),
      jsonKey: 'nestedValuesMapListListList',
    );
    final nestedMapValuesMapListListList$Value = safeLookup<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              Map<
                  String,
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedMapValuesMapListListList']),
      jsonKey: 'nestedMapValuesMapListListList',
    );
    final nestedValuesMapListListListList$Value = safeLookup<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              List<
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedValuesMapListListListList']),
      jsonKey: 'nestedValuesMapListListListList',
    );
    final nestedMapValuesMapListListListList$Value = safeLookup<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              Map<
                  String,
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedMapValuesMapListListListList']),
      jsonKey: 'nestedMapValuesMapListListListList',
    );
    final nestedValuesMapListListListListList$Value = safeLookup<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              List<
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedValuesMapListListListListList']),
      jsonKey: 'nestedValuesMapListListListListList',
    );
    final nestedMapValuesMapListListListListList$Value = safeLookup<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              Map<
                  String,
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedMapValuesMapListListListListList']),
      jsonKey: 'nestedMapValuesMapListListListListList',
    );
    final nestedValuesMapListListListListListList$Value = safeLookup<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              List<
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedValuesMapListListListListListList']),
      jsonKey: 'nestedValuesMapListListListListListList',
    );
    final nestedMapValuesMapListListListListListList$Value = safeLookup<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              Map<
                  String,
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedMapValuesMapListListListListListList']),
      jsonKey: 'nestedMapValuesMapListListListListListList',
    );
    final nestedValuesMapListListListListListListList$Value = safeLookup<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              List<
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedValuesMapListListListListListListList']),
      jsonKey: 'nestedValuesMapListListListListListListList',
    );
    final nestedMapValuesMapListListListListListListList$Value = safeLookup<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              Map<
                  String,
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedMapValuesMapListListListListListListList']),
      jsonKey: 'nestedMapValuesMapListListListListListListList',
    );
    final nestedValuesMapListListListListListListListList$Value = safeLookup<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              List<
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedValuesMapListListListListListListListList']),
      jsonKey: 'nestedValuesMapListListListListListListListList',
    );
    final nestedMapValuesMapListListListListListListListList$Value = safeLookup<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              Map<
                  String,
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedMapValuesMapListListListListListListListList']),
      jsonKey: 'nestedMapValuesMapListListListListListListListList',
    );
    final nestedValuesMapListListListListListListListListList$Value =
        safeLookup<
            List<
                List<
                    Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      call: () => jSerializer.fromJson<
              List<
                  List<
                      Map<String,
                          List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
          json['nestedValuesMapListListListListListListListListList']),
      jsonKey: 'nestedValuesMapListListListListListListListListList',
    );
    final theModel$Value = safeLookup<ComplicatedModel<T>>(
      call: () => jSerializer.fromJson<ComplicatedModel<T>>(json['theModel']),
      jsonKey: 'theModel',
    );
    final theModel2$Value = safeLookup<ComplicatedModel<ComplicatedModel<T>>>(
      call: () => jSerializer
          .fromJson<ComplicatedModel<ComplicatedModel<T>>>(json['theModel2']),
      jsonKey: 'theModel2',
    );
    final theModel3$Value =
        safeLookup<ComplicatedModel<ComplicatedModel<ComplicatedModel<T>>>>(
      call: () => jSerializer
          .fromJson<ComplicatedModel<ComplicatedModel<ComplicatedModel<T>>>>(
              json['theModel3']),
      jsonKey: 'theModel3',
    );
    final theModel4$Value = safeLookup<
        ComplicatedModel<
            ComplicatedModel<ComplicatedModel<ComplicatedModel<T>>>>>(
      call: () => jSerializer.fromJson<
              ComplicatedModel<
                  ComplicatedModel<ComplicatedModel<ComplicatedModel<T>>>>>(
          json['theModel4']),
      jsonKey: 'theModel4',
    );
    final theModel5$Value = safeLookup<
        ComplicatedModel<
            ComplicatedModel<
                ComplicatedModel<ComplicatedModel<ComplicatedModel<T>>>>>>(
      call: () => jSerializer.fromJson<
              ComplicatedModel<
                  ComplicatedModel<
                      ComplicatedModel<
                          ComplicatedModel<ComplicatedModel<T>>>>>>(
          json['theModel5']),
      jsonKey: 'theModel5',
    );
    final theModels$Value = safeLookup<List<ComplicatedModel<T>>>(
      call: () =>
          jSerializer.fromJson<List<ComplicatedModel<T>>>(json['theModels']),
      jsonKey: 'theModels',
    );
    return SuperComplicatedModel<T>(
      value: value$Value,
      name: name$Value,
      age: age$Value,
      isAdult: isAdult$Value,
      height: height$Value,
      friends: friends$Value,
      map: map$Value,
      values: values$Value,
      mapValues: mapValues$Value,
      nestedValues: nestedValues$Value,
      nestedMapValues: nestedMapValues$Value,
      nestedValuesMap: nestedValuesMap$Value,
      nestedMapValuesMap: nestedMapValuesMap$Value,
      nestedValuesMapList: nestedValuesMapList$Value,
      nestedMapValuesMapList: nestedMapValuesMapList$Value,
      nestedValuesMapListList: nestedValuesMapListList$Value,
      nestedMapValuesMapListList: nestedMapValuesMapListList$Value,
      nestedValuesMapListListList: nestedValuesMapListListList$Value,
      nestedMapValuesMapListListList: nestedMapValuesMapListListList$Value,
      nestedValuesMapListListListList: nestedValuesMapListListListList$Value,
      nestedMapValuesMapListListListList:
          nestedMapValuesMapListListListList$Value,
      nestedValuesMapListListListListList:
          nestedValuesMapListListListListList$Value,
      nestedMapValuesMapListListListListList:
          nestedMapValuesMapListListListListList$Value,
      nestedValuesMapListListListListListList:
          nestedValuesMapListListListListListList$Value,
      nestedMapValuesMapListListListListListList:
          nestedMapValuesMapListListListListListList$Value,
      nestedValuesMapListListListListListListList:
          nestedValuesMapListListListListListListList$Value,
      nestedMapValuesMapListListListListListListList:
          nestedMapValuesMapListListListListListListList$Value,
      nestedValuesMapListListListListListListListList:
          nestedValuesMapListListListListListListListList$Value,
      nestedMapValuesMapListListListListListListListList:
          nestedMapValuesMapListListListListListListListList$Value,
      nestedValuesMapListListListListListListListListList:
          nestedValuesMapListListListListListListListListList$Value,
      theModel: theModel$Value,
      theModel2: theModel2$Value,
      theModel3: theModel3$Value,
      theModel4: theModel4$Value,
      theModel5: theModel5$Value,
      theModels: theModels$Value,
    );
  }

  @override
  Function get decoder => decode;

  @override
  Map<String, dynamic> toJson(SuperComplicatedModel model) => {
        'value': jSerializer.toJson(model.value),
        'name': model.name,
        'age': model.age,
        'isAdult': model.isAdult,
        'height': model.height,
        'friends': jSerializer.toJson(model.friends),
        'map': jSerializer.toJson(model.map),
        'values': jSerializer.toJson(model.values),
        'mapValues': jSerializer.toJson(model.mapValues),
        'nestedValues': jSerializer.toJson(model.nestedValues),
        'nestedMapValues': jSerializer.toJson(model.nestedMapValues),
        'nestedValuesMap': jSerializer.toJson(model.nestedValuesMap),
        'nestedMapValuesMap': jSerializer.toJson(model.nestedMapValuesMap),
        'nestedValuesMapList': jSerializer.toJson(model.nestedValuesMapList),
        'nestedMapValuesMapList':
            jSerializer.toJson(model.nestedMapValuesMapList),
        'nestedValuesMapListList':
            jSerializer.toJson(model.nestedValuesMapListList),
        'nestedMapValuesMapListList':
            jSerializer.toJson(model.nestedMapValuesMapListList),
        'nestedValuesMapListListList':
            jSerializer.toJson(model.nestedValuesMapListListList),
        'nestedMapValuesMapListListList':
            jSerializer.toJson(model.nestedMapValuesMapListListList),
        'nestedValuesMapListListListList':
            jSerializer.toJson(model.nestedValuesMapListListListList),
        'nestedMapValuesMapListListListList':
            jSerializer.toJson(model.nestedMapValuesMapListListListList),
        'nestedValuesMapListListListListList':
            jSerializer.toJson(model.nestedValuesMapListListListListList),
        'nestedMapValuesMapListListListListList':
            jSerializer.toJson(model.nestedMapValuesMapListListListListList),
        'nestedValuesMapListListListListListList':
            jSerializer.toJson(model.nestedValuesMapListListListListListList),
        'nestedMapValuesMapListListListListListList': jSerializer
            .toJson(model.nestedMapValuesMapListListListListListList),
        'nestedValuesMapListListListListListListList': jSerializer
            .toJson(model.nestedValuesMapListListListListListListList),
        'nestedMapValuesMapListListListListListListList': jSerializer
            .toJson(model.nestedMapValuesMapListListListListListListList),
        'nestedValuesMapListListListListListListListList': jSerializer
            .toJson(model.nestedValuesMapListListListListListListListList),
        'nestedMapValuesMapListListListListListListListList': jSerializer
            .toJson(model.nestedMapValuesMapListListListListListListListList),
        'nestedValuesMapListListListListListListListListList': jSerializer
            .toJson(model.nestedValuesMapListListListListListListListListList),
        'theModel': jSerializer.toJson(model.theModel),
        'theModel2': jSerializer.toJson(model.theModel2),
        'theModel3': jSerializer.toJson(model.theModel3),
        'theModel4': jSerializer.toJson(model.theModel4),
        'theModel5': jSerializer.toJson(model.theModel5),
        'theModels': jSerializer.toJson(model.theModels),
      };
}

class ComplicatedModelSerializer
    extends js.GenericModelSerializer<ComplicatedModel> {
  ComplicatedModelSerializer({super.jSerializer});

  static const jsonKeys = {
    'value',
    'name',
    'age',
    'isAdult',
    'height',
    'friends',
    'map',
    'values',
    'mapValues',
    'nestedValues',
    'nestedMapValues',
    'nestedValuesMap',
    'nestedMapValuesMap',
    'nestedValuesMapList',
    'nestedMapValuesMapList',
    'nestedValuesMapListList',
    'nestedMapValuesMapListList',
    'nestedValuesMapListListList',
    'nestedMapValuesMapListListList',
    'nestedValuesMapListListListList',
    'nestedMapValuesMapListListListList',
    'nestedValuesMapListListListListList',
    'nestedMapValuesMapListListListListList',
    'nestedValuesMapListListListListListList',
    'nestedMapValuesMapListListListListListList',
    'nestedValuesMapListListListListListListList',
    'nestedMapValuesMapListListListListListListList',
    'nestedValuesMapListListListListListListListList',
    'nestedMapValuesMapListListListListListListListList',
    'nestedValuesMapListListListListListListListListList',
  };

  ComplicatedModel<T> decode<T>(Map json) {
    final value$Value = safeLookup<T>(
      call: () => jSerializer.fromJson<T>(json['value']),
      jsonKey: 'value',
    );
    final name$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['name']),
      jsonKey: 'name',
    );
    final age$Value = safeLookup<int>(
      call: () => jSerializer.fromJson<int>(json['age']),
      jsonKey: 'age',
    );
    final isAdult$Value = safeLookup<bool>(
      call: () => jSerializer.fromJson<bool>(json['isAdult']),
      jsonKey: 'isAdult',
    );
    final height$Value = safeLookup<double>(
      call: () => jSerializer.fromJson<double>(json['height']),
      jsonKey: 'height',
    );
    final friends$Value = safeLookup<List<String>>(
      call: () => jSerializer.fromJson<List<String>>(json['friends']),
      jsonKey: 'friends',
    );
    final map$Value = safeLookup<Map<String, dynamic>>(
      call: () => jSerializer.fromJson<Map<String, dynamic>>(json['map']),
      jsonKey: 'map',
    );
    final values$Value = safeLookup<List<T>>(
      call: () => jSerializer.fromJson<List<T>>(json['values']),
      jsonKey: 'values',
    );
    final mapValues$Value = safeLookup<Map<String, T>>(
      call: () => jSerializer.fromJson<Map<String, T>>(json['mapValues']),
      jsonKey: 'mapValues',
    );
    final nestedValues$Value = safeLookup<List<List<T>>>(
      call: () => jSerializer.fromJson<List<List<T>>>(json['nestedValues']),
      jsonKey: 'nestedValues',
    );
    final nestedMapValues$Value = safeLookup<Map<String, List<T>>>(
      call: () =>
          jSerializer.fromJson<Map<String, List<T>>>(json['nestedMapValues']),
      jsonKey: 'nestedMapValues',
    );
    final nestedValuesMap$Value = safeLookup<List<Map<String, T>>>(
      call: () =>
          jSerializer.fromJson<List<Map<String, T>>>(json['nestedValuesMap']),
      jsonKey: 'nestedValuesMap',
    );
    final nestedMapValuesMap$Value =
        safeLookup<Map<String, List<Map<String, T>>>>(
      call: () => jSerializer.fromJson<Map<String, List<Map<String, T>>>>(
          json['nestedMapValuesMap']),
      jsonKey: 'nestedMapValuesMap',
    );
    final nestedValuesMapList$Value = safeLookup<List<List<Map<String, T>>>>(
      call: () => jSerializer
          .fromJson<List<List<Map<String, T>>>>(json['nestedValuesMapList']),
      jsonKey: 'nestedValuesMapList',
    );
    final nestedMapValuesMapList$Value =
        safeLookup<Map<String, List<Map<String, T>>>>(
      call: () => jSerializer.fromJson<Map<String, List<Map<String, T>>>>(
          json['nestedMapValuesMapList']),
      jsonKey: 'nestedMapValuesMapList',
    );
    final nestedValuesMapListList$Value =
        safeLookup<List<List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<List<List<Map<String, List<T>>>>>(
          json['nestedValuesMapListList']),
      jsonKey: 'nestedValuesMapListList',
    );
    final nestedMapValuesMapListList$Value =
        safeLookup<Map<String, List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<Map<String, List<Map<String, List<T>>>>>(
          json['nestedMapValuesMapListList']),
      jsonKey: 'nestedMapValuesMapListList',
    );
    final nestedValuesMapListListList$Value =
        safeLookup<List<List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<List<List<Map<String, List<T>>>>>(
          json['nestedValuesMapListListList']),
      jsonKey: 'nestedValuesMapListListList',
    );
    final nestedMapValuesMapListListList$Value =
        safeLookup<Map<String, List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<Map<String, List<Map<String, List<T>>>>>(
          json['nestedMapValuesMapListListList']),
      jsonKey: 'nestedMapValuesMapListListList',
    );
    final nestedValuesMapListListListList$Value =
        safeLookup<List<List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<List<List<Map<String, List<T>>>>>(
          json['nestedValuesMapListListListList']),
      jsonKey: 'nestedValuesMapListListListList',
    );
    final nestedMapValuesMapListListListList$Value =
        safeLookup<Map<String, List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<Map<String, List<Map<String, List<T>>>>>(
          json['nestedMapValuesMapListListListList']),
      jsonKey: 'nestedMapValuesMapListListListList',
    );
    final nestedValuesMapListListListListList$Value =
        safeLookup<List<List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<List<List<Map<String, List<T>>>>>(
          json['nestedValuesMapListListListListList']),
      jsonKey: 'nestedValuesMapListListListListList',
    );
    final nestedMapValuesMapListListListListList$Value =
        safeLookup<Map<String, List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<Map<String, List<Map<String, List<T>>>>>(
          json['nestedMapValuesMapListListListListList']),
      jsonKey: 'nestedMapValuesMapListListListListList',
    );
    final nestedValuesMapListListListListListList$Value =
        safeLookup<List<List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<List<List<Map<String, List<T>>>>>(
          json['nestedValuesMapListListListListListList']),
      jsonKey: 'nestedValuesMapListListListListListList',
    );
    final nestedMapValuesMapListListListListListList$Value =
        safeLookup<Map<String, List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<Map<String, List<Map<String, List<T>>>>>(
          json['nestedMapValuesMapListListListListListList']),
      jsonKey: 'nestedMapValuesMapListListListListListList',
    );
    final nestedValuesMapListListListListListListList$Value =
        safeLookup<List<List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<List<List<Map<String, List<T>>>>>(
          json['nestedValuesMapListListListListListListList']),
      jsonKey: 'nestedValuesMapListListListListListListList',
    );
    final nestedMapValuesMapListListListListListListList$Value =
        safeLookup<Map<String, List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<Map<String, List<Map<String, List<T>>>>>(
          json['nestedMapValuesMapListListListListListListList']),
      jsonKey: 'nestedMapValuesMapListListListListListListList',
    );
    final nestedValuesMapListListListListListListListList$Value =
        safeLookup<List<List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<List<List<Map<String, List<T>>>>>(
          json['nestedValuesMapListListListListListListListList']),
      jsonKey: 'nestedValuesMapListListListListListListListList',
    );
    final nestedMapValuesMapListListListListListListListList$Value =
        safeLookup<Map<String, List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<Map<String, List<Map<String, List<T>>>>>(
          json['nestedMapValuesMapListListListListListListListList']),
      jsonKey: 'nestedMapValuesMapListListListListListListListList',
    );
    final nestedValuesMapListListListListListListListListList$Value =
        safeLookup<List<List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<List<List<Map<String, List<T>>>>>(
          json['nestedValuesMapListListListListListListListListList']),
      jsonKey: 'nestedValuesMapListListListListListListListListList',
    );
    return ComplicatedModel<T>(
      value: value$Value,
      name: name$Value,
      age: age$Value,
      isAdult: isAdult$Value,
      height: height$Value,
      friends: friends$Value,
      map: map$Value,
      values: values$Value,
      mapValues: mapValues$Value,
      nestedValues: nestedValues$Value,
      nestedMapValues: nestedMapValues$Value,
      nestedValuesMap: nestedValuesMap$Value,
      nestedMapValuesMap: nestedMapValuesMap$Value,
      nestedValuesMapList: nestedValuesMapList$Value,
      nestedMapValuesMapList: nestedMapValuesMapList$Value,
      nestedValuesMapListList: nestedValuesMapListList$Value,
      nestedMapValuesMapListList: nestedMapValuesMapListList$Value,
      nestedValuesMapListListList: nestedValuesMapListListList$Value,
      nestedMapValuesMapListListList: nestedMapValuesMapListListList$Value,
      nestedValuesMapListListListList: nestedValuesMapListListListList$Value,
      nestedMapValuesMapListListListList:
          nestedMapValuesMapListListListList$Value,
      nestedValuesMapListListListListList:
          nestedValuesMapListListListListList$Value,
      nestedMapValuesMapListListListListList:
          nestedMapValuesMapListListListListList$Value,
      nestedValuesMapListListListListListList:
          nestedValuesMapListListListListListList$Value,
      nestedMapValuesMapListListListListListList:
          nestedMapValuesMapListListListListListList$Value,
      nestedValuesMapListListListListListListList:
          nestedValuesMapListListListListListListList$Value,
      nestedMapValuesMapListListListListListListList:
          nestedMapValuesMapListListListListListListList$Value,
      nestedValuesMapListListListListListListListList:
          nestedValuesMapListListListListListListListList$Value,
      nestedMapValuesMapListListListListListListListList:
          nestedMapValuesMapListListListListListListListList$Value,
      nestedValuesMapListListListListListListListListList:
          nestedValuesMapListListListListListListListListList$Value,
    );
  }

  @override
  Function get decoder => decode;

  @override
  Map<String, dynamic> toJson(ComplicatedModel model) => {
        'value': jSerializer.toJson(model.value),
        'name': model.name,
        'age': model.age,
        'isAdult': model.isAdult,
        'height': model.height,
        'friends': jSerializer.toJson(model.friends),
        'map': jSerializer.toJson(model.map),
        'values': jSerializer.toJson(model.values),
        'mapValues': jSerializer.toJson(model.mapValues),
        'nestedValues': jSerializer.toJson(model.nestedValues),
        'nestedMapValues': jSerializer.toJson(model.nestedMapValues),
        'nestedValuesMap': jSerializer.toJson(model.nestedValuesMap),
        'nestedMapValuesMap': jSerializer.toJson(model.nestedMapValuesMap),
        'nestedValuesMapList': jSerializer.toJson(model.nestedValuesMapList),
        'nestedMapValuesMapList':
            jSerializer.toJson(model.nestedMapValuesMapList),
        'nestedValuesMapListList':
            jSerializer.toJson(model.nestedValuesMapListList),
        'nestedMapValuesMapListList':
            jSerializer.toJson(model.nestedMapValuesMapListList),
        'nestedValuesMapListListList':
            jSerializer.toJson(model.nestedValuesMapListListList),
        'nestedMapValuesMapListListList':
            jSerializer.toJson(model.nestedMapValuesMapListListList),
        'nestedValuesMapListListListList':
            jSerializer.toJson(model.nestedValuesMapListListListList),
        'nestedMapValuesMapListListListList':
            jSerializer.toJson(model.nestedMapValuesMapListListListList),
        'nestedValuesMapListListListListList':
            jSerializer.toJson(model.nestedValuesMapListListListListList),
        'nestedMapValuesMapListListListListList':
            jSerializer.toJson(model.nestedMapValuesMapListListListListList),
        'nestedValuesMapListListListListListList':
            jSerializer.toJson(model.nestedValuesMapListListListListListList),
        'nestedMapValuesMapListListListListListList': jSerializer
            .toJson(model.nestedMapValuesMapListListListListListList),
        'nestedValuesMapListListListListListListList': jSerializer
            .toJson(model.nestedValuesMapListListListListListListList),
        'nestedMapValuesMapListListListListListListList': jSerializer
            .toJson(model.nestedMapValuesMapListListListListListListList),
        'nestedValuesMapListListListListListListListList': jSerializer
            .toJson(model.nestedValuesMapListListListListListListListList),
        'nestedMapValuesMapListListListListListListListList': jSerializer
            .toJson(model.nestedMapValuesMapListListListListListListListList),
        'nestedValuesMapListListListListListListListListList': jSerializer
            .toJson(model.nestedValuesMapListListListListListListListListList),
      };
}

class SemiComplicatedModelSerializer
    extends js.GenericModelSerializer<SemiComplicatedModel> {
  SemiComplicatedModelSerializer({super.jSerializer});

  static const jsonKeys = {
    'value',
    'name',
    'age',
    'isAdult',
    'height',
    'friends',
    'map',
    'values',
    'mapValues',
    'nestedValues',
    'nestedMapValues',
    'nestedValuesMap',
    'nestedMapValuesMap',
    'nestedValuesMapList',
    'nestedValuesMapListList',
    'nestedMapValuesMapListList',
  };

  SemiComplicatedModel<T> decode<T>(Map json) {
    final value$Value = safeLookup<T>(
      call: () => jSerializer.fromJson<T>(json['value']),
      jsonKey: 'value',
    );
    final name$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['name']),
      jsonKey: 'name',
    );
    final age$Value = safeLookup<int>(
      call: () => jSerializer.fromJson<int>(json['age']),
      jsonKey: 'age',
    );
    final isAdult$Value = safeLookup<bool>(
      call: () => jSerializer.fromJson<bool>(json['isAdult']),
      jsonKey: 'isAdult',
    );
    final height$Value = safeLookup<double>(
      call: () => jSerializer.fromJson<double>(json['height']),
      jsonKey: 'height',
    );
    final friends$Value = safeLookup<List<String>>(
      call: () => jSerializer.fromJson<List<String>>(json['friends']),
      jsonKey: 'friends',
    );
    final map$Value = safeLookup<Map<String, dynamic>>(
      call: () => jSerializer.fromJson<Map<String, dynamic>>(json['map']),
      jsonKey: 'map',
    );
    final values$Value = safeLookup<List<T>>(
      call: () => jSerializer.fromJson<List<T>>(json['values']),
      jsonKey: 'values',
    );
    final mapValues$Value = safeLookup<Map<String, T>>(
      call: () => jSerializer.fromJson<Map<String, T>>(json['mapValues']),
      jsonKey: 'mapValues',
    );
    final nestedValues$Value = safeLookup<List<List<T>>>(
      call: () => jSerializer.fromJson<List<List<T>>>(json['nestedValues']),
      jsonKey: 'nestedValues',
    );
    final nestedMapValues$Value = safeLookup<Map<String, List<T>>>(
      call: () =>
          jSerializer.fromJson<Map<String, List<T>>>(json['nestedMapValues']),
      jsonKey: 'nestedMapValues',
    );
    final nestedValuesMap$Value = safeLookup<List<Map<String, T>>>(
      call: () =>
          jSerializer.fromJson<List<Map<String, T>>>(json['nestedValuesMap']),
      jsonKey: 'nestedValuesMap',
    );
    final nestedMapValuesMap$Value =
        safeLookup<Map<String, List<Map<String, T>>>>(
      call: () => jSerializer.fromJson<Map<String, List<Map<String, T>>>>(
          json['nestedMapValuesMap']),
      jsonKey: 'nestedMapValuesMap',
    );
    final nestedValuesMapList$Value = safeLookup<List<List<Map<String, T>>>>(
      call: () => jSerializer
          .fromJson<List<List<Map<String, T>>>>(json['nestedValuesMapList']),
      jsonKey: 'nestedValuesMapList',
    );
    final nestedValuesMapListList$Value =
        safeLookup<List<List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<List<List<Map<String, List<T>>>>>(
          json['nestedValuesMapListList']),
      jsonKey: 'nestedValuesMapListList',
    );
    final nestedMapValuesMapListList$Value =
        safeLookup<Map<String, List<Map<String, List<T>>>>>(
      call: () => jSerializer.fromJson<Map<String, List<Map<String, List<T>>>>>(
          json['nestedMapValuesMapListList']),
      jsonKey: 'nestedMapValuesMapListList',
    );
    return SemiComplicatedModel<T>(
      value: value$Value,
      name: name$Value,
      age: age$Value,
      isAdult: isAdult$Value,
      height: height$Value,
      friends: friends$Value,
      map: map$Value,
      values: values$Value,
      mapValues: mapValues$Value,
      nestedValues: nestedValues$Value,
      nestedMapValues: nestedMapValues$Value,
      nestedValuesMap: nestedValuesMap$Value,
      nestedMapValuesMap: nestedMapValuesMap$Value,
      nestedValuesMapList: nestedValuesMapList$Value,
      nestedValuesMapListList: nestedValuesMapListList$Value,
      nestedMapValuesMapListList: nestedMapValuesMapListList$Value,
    );
  }

  @override
  Function get decoder => decode;

  @override
  Map<String, dynamic> toJson(SemiComplicatedModel model) => {
        'value': jSerializer.toJson(model.value),
        'name': model.name,
        'age': model.age,
        'isAdult': model.isAdult,
        'height': model.height,
        'friends': jSerializer.toJson(model.friends),
        'map': jSerializer.toJson(model.map),
        'values': jSerializer.toJson(model.values),
        'mapValues': jSerializer.toJson(model.mapValues),
        'nestedValues': jSerializer.toJson(model.nestedValues),
        'nestedMapValues': jSerializer.toJson(model.nestedMapValues),
        'nestedValuesMap': jSerializer.toJson(model.nestedValuesMap),
        'nestedMapValuesMap': jSerializer.toJson(model.nestedMapValuesMap),
        'nestedValuesMapList': jSerializer.toJson(model.nestedValuesMapList),
        'nestedValuesMapListList':
            jSerializer.toJson(model.nestedValuesMapListList),
        'nestedMapValuesMapListList':
            jSerializer.toJson(model.nestedMapValuesMapListList),
      };
}

class ProductCustomizationSerializer
    extends js.ModelSerializer<ProductCustomization> {
  const ProductCustomizationSerializer({super.jSerializer});

  static const jsonKeys = {
    'id',
    'decoration',
    'min',
    'max',
    'values',
  };

  @override
  ProductCustomization fromJson(json) {
    final id$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['id']),
      jsonKey: 'id',
    );
    final decoration$Value = safeLookup<ProductCustomizationDecoration?>(
      call: () => jSerializer
          .fromJson<ProductCustomizationDecoration?>(json['decoration']),
      jsonKey: 'decoration',
    );
    final minSelection$Value = safeLookup<int?>(
      call: () => jSerializer.fromJson<int?>(json['min']),
      jsonKey: 'min',
      fieldName: 'minSelection',
    );
    final maxSelection$Value = safeLookup<int?>(
      call: () => jSerializer.fromJson<int?>(json['max']),
      jsonKey: 'max',
      fieldName: 'maxSelection',
    );
    final values$Value = safeLookup<List<ProductCustomizationValue>?>(
      call: () => jSerializer
          .fromJson<List<ProductCustomizationValue>?>(json['values']),
      jsonKey: 'values',
    );
    return ProductCustomization(
      id: id$Value,
      decoration: decoration$Value,
      minSelection: minSelection$Value,
      maxSelection: maxSelection$Value,
      values: values$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(ProductCustomization model) => {
        'id': model.id,
        'decoration': jSerializer.toJson(model.decoration),
        'min': model.minSelection,
        'max': model.maxSelection,
        'values': jSerializer.toJson(model.values),
      };
}

class ProductCustomizationValueSerializer
    extends js.ModelSerializer<ProductCustomizationValue> {
  const ProductCustomizationValueSerializer({super.jSerializer});

  static const jsonKeys = {
    'id',
    'name',
    'featuredImage',
    'description',
    'price',
  };

  @override
  ProductCustomizationValue fromJson(json) {
    final id$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['id']),
      jsonKey: 'id',
    );
    final name$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['name']),
      jsonKey: 'name',
    );
    final featuredImage$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['featuredImage']),
      jsonKey: 'featuredImage',
    );
    final description$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['description']),
      jsonKey: 'description',
    );
    final price$Value = safeLookup<Price?>(
      call: () => jSerializer.fromJson<Price?>(json['price']),
      jsonKey: 'price',
    );
    return ProductCustomizationValue(
      id: id$Value,
      name: name$Value,
      featuredImage: featuredImage$Value,
      description: description$Value,
      price: price$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(ProductCustomizationValue model) => {
        'id': model.id,
        'name': model.name,
        'featuredImage': model.featuredImage,
        'description': model.description,
        'price': jSerializer.toJson(model.price),
      };
}

class ProductCustomizationDecorationSerializer
    extends js.ModelSerializer<ProductCustomizationDecoration> {
  const ProductCustomizationDecorationSerializer({super.jSerializer});

  static const jsonKeys = {
    'title',
    'preTitle',
    'subtitle',
  };

  @override
  ProductCustomizationDecoration fromJson(json) {
    final title$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['title']),
      jsonKey: 'title',
    );
    final preTitle$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['preTitle']),
      jsonKey: 'preTitle',
    );
    final subtitle$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['subtitle']),
      jsonKey: 'subtitle',
    );
    return ProductCustomizationDecoration(
      title: title$Value,
      preTitle: preTitle$Value,
      subtitle: subtitle$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(ProductCustomizationDecoration model) => {
        'title': model.title,
        'preTitle': model.preTitle,
        'subtitle': model.subtitle,
      };
}

class PriceSerializer extends js.ModelSerializer<Price> {
  const PriceSerializer({super.jSerializer});

  static const jsonKeys = {
    'amount',
    'currency',
  };

  @override
  Price fromJson(json) {
    final amount$Value = safeLookup<double>(
      call: () => jSerializer.fromJson<double>(json['amount']),
      jsonKey: 'amount',
    );
    final currency$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['currency']),
      jsonKey: 'currency',
    );
    return Price(
      amount: amount$Value,
      currency: currency$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(Price model) => {
        'amount': model.amount,
        'currency': model.currency,
      };
}

class SomeModelSerializer extends js.ModelSerializer<SomeModel> {
  const SomeModelSerializer({super.jSerializer});

  static const jsonKeys = {
    'field1',
    'field2',
    'field3',
    'field4',
  };

  @override
  SomeModel fromJson(json) {
    final field1$Value = safeLookup<String>(
      call: () => jSerializer.fromJson<String>(json['field1']),
      jsonKey: 'field1',
    );
    final field2$Value = safeLookup<String?>(
      call: () => jSerializer.fromJson<String?>(json['field2']),
      jsonKey: 'field2',
    );
    final field3$Value = safeLookup<double?>(
      call: () => jSerializer.fromJson<double?>(json['field3']),
      jsonKey: 'field3',
    );
    final field4$Value = safeLookup<int?>(
      call: () => jSerializer.fromJson<int?>(json['field4']),
      jsonKey: 'field4',
    );
    final extras$Value = Map<String, dynamic>.from(json)
      ..removeWhere((
        key,
        _,
      ) =>
          jsonKeys.contains(key));
    return SomeModel(
      field1: field1$Value,
      field2: field2$Value,
      field3: field3$Value,
      field4: field4$Value,
      extras: extras$Value,
    );
  }

  @override
  Map<String, dynamic> toJson(SomeModel model) => Map.of(model.extras)
    ..addAll({
      'field1': model.field1,
      'field2': model.field2,
      'field3': model.field3,
      'field4': model.field4,
    });
}

class SomeGenericModelSerializer
    extends js.GenericModelSerializer<SomeGenericModel> {
  SomeGenericModelSerializer({super.jSerializer});

  static const jsonKeys = {'value'};

  SomeGenericModel<T> decode<T>(Map json) {
    final value$Value = safeLookup<T>(
      call: () => jSerializer.fromJson<T>(json['value']),
      jsonKey: 'value',
    );
    final extras$Value = Map<String, dynamic>.from(json)
      ..removeWhere((
        key,
        _,
      ) =>
          jsonKeys.contains(key));
    return SomeGenericModel<T>(
      value: value$Value,
      extras: extras$Value,
    );
  }

  @override
  Function get decoder => decode;

  @override
  Map<String, dynamic> toJson(SomeGenericModel model) =>
      Map.of(model.extras)..addAll({'value': jSerializer.toJson(model.value)});
}

class SomeEnumSerializer extends js.CustomModelSerializer<SomeEnum, String> {
  const SomeEnumSerializer({super.jSerializer});

  @override
  SomeEnum fromJson(String json) {
    if (json == 'someValue1') return SomeEnum.someValue1;

    if (json == 'someValue2') return SomeEnum.someValue2;

    throw Exception(
      'JSerializationException in Enum of type $SomeEnum '
      'Unknown enum value: $json',
    );
  }

  @override
  String toJson(SomeEnum model) {
    switch (model) {
      case SomeEnum.someValue1:
        return 'someValue1';

      case SomeEnum.someValue2:
        return 'someValue2';
    }
  }
}

class ProductMocker extends js.JModelMocker<Product> {
  const ProductMocker({super.jSerializer});

  @override
  Product createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final id$Value = subMock<String>(
      context: context,
      fieldName: 'id',
      currentLevel: currentLevel,
    );
    final name$Value = subMock<String?>(
      context: context,
      fieldName: 'name',
      currentLevel: currentLevel,
    );
    final price$Value = subMock<Price?>(
      context: context,
      fieldName: 'price',
      currentLevel: currentLevel,
    );
    final originalPrice$Value = subMock<Price?>(
      context: context,
      fieldName: 'originalPrice',
      currentLevel: currentLevel,
    );
    final featuredImage$Value = subMock<String?>(
      context: context,
      fieldName: 'featuredImage',
      currentLevel: currentLevel,
    );
    final images$Value = subMock<List<String>?>(
      context: context,
      fieldName: 'images',
      currentLevel: currentLevel,
    );
    final vendor$Value = subMock<Vendor?>(
      context: context,
      fieldName: 'vendor',
      currentLevel: currentLevel,
    );
    final currency$Value = subMock<String?>(
      context: context,
      fieldName: 'currency',
      currentLevel: currentLevel,
    );
    final maxPurchaseQuantity$Value = subMock<int?>(
      context: context,
      fieldName: 'maxPurchaseQuantity',
      currentLevel: currentLevel,
    );
    final service$Value = subMock<String?>(
      context: context,
      fieldName: 'service',
      currentLevel: currentLevel,
    );
    final category$Value = subMock<List<Category?>?>(
      context: context,
      fieldName: 'category',
      currentLevel: currentLevel,
    );
    final discountRate$Value = subMock<String?>(
      context: context,
      fieldName: 'discountRate',
      currentLevel: currentLevel,
    );
    final isAvailable$Value = subMock<bool?>(
      context: context,
      fieldName: 'isAvailable',
      currentLevel: currentLevel,
    );
    final description$Value = subMock<String?>(
      context: context,
      fieldName: 'description',
      currentLevel: currentLevel,
    );
    final tags$Value = subMock<List<Tag>?>(
      context: context,
      fieldName: 'tags',
      currentLevel: currentLevel,
    );
    final barcode$Value = subMock<String?>(
      context: context,
      fieldName: 'barcode',
      currentLevel: currentLevel,
    );
    final quantity$Value = subMock<int?>(
      context: context,
      fieldName: 'quantity',
      currentLevel: currentLevel,
    );
    final variants$Value = subMock<List<ProductVariant>?>(
      context: context,
      fieldName: 'variants',
      currentLevel: currentLevel,
    );
    final shortUrl$Value = subMock<String?>(
      context: context,
      fieldName: 'shortUrl',
      currentLevel: currentLevel,
    );
    final brand$Value = subMock<Brand?>(
      context: context,
      fieldName: 'brand',
      currentLevel: currentLevel,
    );
    final variantsAttributes$Value = subMock<List<ProductAttribute>?>(
      context: context,
      fieldName: 'variantsAttributes',
      currentLevel: currentLevel,
    );
    final attributes$Value = subMock<List<ProductAttributeValue>?>(
      context: context,
      fieldName: 'attributes',
      currentLevel: currentLevel,
    );
    final groupReference$Value = subMock<String?>(
      context: context,
      fieldName: 'groupReference',
      currentLevel: currentLevel,
    );
    final vendorId$Value = subMock<String?>(
      context: context,
      fieldName: 'vendorId',
      currentLevel: currentLevel,
    );
    final userSpecifics$Value = subMock<ProductUserSpecific?>(
      context: context,
      fieldName: 'userSpecifics',
      currentLevel: currentLevel,
    );
    final customizations$Value = subMock<List<ProductCustomization>?>(
      context: context,
      fieldName: 'customizations',
      currentLevel: currentLevel,
    );
    return Product(
      id: id$Value,
      name: name$Value,
      price: price$Value,
      originalPrice: originalPrice$Value,
      featuredImage: featuredImage$Value,
      images: images$Value,
      vendor: vendor$Value,
      currency: currency$Value,
      maxPurchaseQuantity: maxPurchaseQuantity$Value,
      service: service$Value,
      category: category$Value,
      discountRate: discountRate$Value,
      isAvailable: isAvailable$Value,
      description: description$Value,
      tags: tags$Value,
      barcode: barcode$Value,
      quantity: quantity$Value,
      variants: variants$Value,
      shortUrl: shortUrl$Value,
      brand: brand$Value,
      variantsAttributes: variantsAttributes$Value,
      attributes: attributes$Value,
      groupReference: groupReference$Value,
      vendorId: vendorId$Value,
      userSpecifics: userSpecifics$Value,
      customizations: customizations$Value,
    );
  }
}

class TagMocker extends js.JModelMocker<Tag> {
  const TagMocker({super.jSerializer});

  @override
  Tag createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final key$Value = subMock<String?>(
      context: context,
      fieldName: 'key',
      currentLevel: currentLevel,
    );
    final title$Value = subMock<String?>(
      context: context,
      fieldName: 'title',
      currentLevel: currentLevel,
    );
    final subTitle$Value = subMock<String?>(
      context: context,
      fieldName: 'subTitle',
      currentLevel: currentLevel,
    );
    final featuredImage$Value = subMock<String?>(
      context: context,
      fieldName: 'featuredImage',
      currentLevel: currentLevel,
    );
    return Tag(
      key: key$Value,
      title: title$Value,
      subTitle: subTitle$Value,
      featuredImage: featuredImage$Value,
    );
  }
}

class VendorMocker extends js.JModelMocker<Vendor> {
  const VendorMocker({super.jSerializer});

  @override
  Vendor createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final id$Value = subMock<String?>(
      context: context,
      fieldName: 'id',
      currentLevel: currentLevel,
    );
    final name$Value = subMock<String?>(
      context: context,
      fieldName: 'name',
      currentLevel: currentLevel,
    );
    final banner$Value = subMock<String?>(
      context: context,
      fieldName: 'banner',
      currentLevel: currentLevel,
    );
    final featuredImage$Value = subMock<String?>(
      context: context,
      fieldName: 'featuredImage',
      currentLevel: currentLevel,
    );
    final images$Value = subMock<List<String>?>(
      context: context,
      fieldName: 'images',
      currentLevel: currentLevel,
    );
    final category$Value = subMock<Category?>(
      context: context,
      fieldName: 'category',
      currentLevel: currentLevel,
    );
    final service$Value = subMock<String?>(
      context: context,
      fieldName: 'service',
      currentLevel: currentLevel,
    );
    final isOpen$Value = subMock<bool?>(
      context: context,
      fieldName: 'isOpen',
      currentLevel: currentLevel,
    );
    final partnerSupportNumber$Value = subMock<String?>(
      context: context,
      fieldName: 'partnerSupportNumber',
      currentLevel: currentLevel,
    );
    final minimumOrderAmount$Value = subMock<Price?>(
      context: context,
      fieldName: 'minimumOrderAmount',
      currentLevel: currentLevel,
    );
    return Vendor(
      id: id$Value,
      name: name$Value,
      banner: banner$Value,
      featuredImage: featuredImage$Value,
      images: images$Value,
      category: category$Value,
      service: service$Value,
      isOpen: isOpen$Value,
      partnerSupportNumber: partnerSupportNumber$Value,
      minimumOrderAmount: minimumOrderAmount$Value,
    );
  }
}

class CategoryMocker extends js.JModelMocker<Category> {
  const CategoryMocker({super.jSerializer});

  @override
  Category createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final id$Value = subMock<String?>(
      context: context,
      fieldName: 'id',
      currentLevel: currentLevel,
    );
    final banner$Value = subMock<String?>(
      context: context,
      fieldName: 'banner',
      currentLevel: currentLevel,
    );
    final service$Value = subMock<String?>(
      context: context,
      fieldName: 'service',
      currentLevel: currentLevel,
    );
    final featuredImage$Value = subMock<String?>(
      context: context,
      fieldName: 'featuredImage',
      currentLevel: currentLevel,
    );
    final images$Value = subMock<List<String>?>(
      context: context,
      fieldName: 'images',
      currentLevel: currentLevel,
    );
    final name$Value = subMock<String?>(
      context: context,
      fieldName: 'name',
      currentLevel: currentLevel,
    );
    return Category(
      id: id$Value,
      banner: banner$Value,
      service: service$Value,
      featuredImage: featuredImage$Value,
      images: images$Value,
      name: name$Value,
    );
  }
}

class ProductUserSpecificMocker extends js.JModelMocker<ProductUserSpecific> {
  const ProductUserSpecificMocker({super.jSerializer});

  @override
  ProductUserSpecific createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final isFavorite$Value = subMock<bool?>(
      context: context,
      fieldName: 'isFavorite',
      currentLevel: currentLevel,
    );
    final cartQuantity$Value = subMock<int?>(
      context: context,
      fieldName: 'cartQuantity',
      currentLevel: currentLevel,
    );
    return ProductUserSpecific(
      isFavorite: isFavorite$Value,
      cartQuantity: cartQuantity$Value,
    );
  }
}

class ProductAttributeMocker extends js.JModelMocker<ProductAttribute> {
  const ProductAttributeMocker({super.jSerializer});

  @override
  ProductAttribute createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final id$Value = subMock<String>(
      context: context,
      fieldName: 'id',
      currentLevel: currentLevel,
    );
    final name$Value = subMock<String?>(
      context: context,
      fieldName: 'name',
      currentLevel: currentLevel,
    );
    final values$Value = subMock<List<ProductAttributeValue>?>(
      context: context,
      fieldName: 'values',
      currentLevel: currentLevel,
    );
    return ProductAttribute(
      id: id$Value,
      name: name$Value,
      values: values$Value,
    );
  }
}

class ProductAttributeValueMocker
    extends js.JModelMocker<ProductAttributeValue> {
  const ProductAttributeValueMocker({super.jSerializer});

  @override
  ProductAttributeValue createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final id$Value = subMock<String>(
      context: context,
      fieldName: 'id',
      currentLevel: currentLevel,
    );
    final name$Value = subMock<String?>(
      context: context,
      fieldName: 'name',
      currentLevel: currentLevel,
    );
    final color$Value = subMock<String?>(
      context: context,
      fieldName: 'color',
      currentLevel: currentLevel,
    );
    final featuredImage$Value = subMock<String?>(
      context: context,
      fieldName: 'featuredImage',
      currentLevel: currentLevel,
    );
    return ProductAttributeValue(
      id: id$Value,
      name: name$Value,
      color: color$Value,
      featuredImage: featuredImage$Value,
    );
  }
}

class BrandMocker extends js.JModelMocker<Brand> {
  const BrandMocker({super.jSerializer});

  @override
  Brand createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final name$Value = subMock<String?>(
      context: context,
      fieldName: 'name',
      currentLevel: currentLevel,
    );
    final logo$Value = subMock<String?>(
      context: context,
      fieldName: 'logo',
      currentLevel: currentLevel,
    );
    return Brand(
      name: name$Value,
      logo: logo$Value,
    );
  }
}

class ProductVariantMocker extends js.JModelMocker<ProductVariant> {
  const ProductVariantMocker({super.jSerializer});

  @override
  ProductVariant createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final id$Value = subMock<String>(
      context: context,
      fieldName: 'id',
      currentLevel: currentLevel,
    );
    final name$Value = subMock<String?>(
      context: context,
      fieldName: 'name',
      currentLevel: currentLevel,
    );
    final price$Value = subMock<Price?>(
      context: context,
      fieldName: 'price',
      currentLevel: currentLevel,
    );
    final featuredImage$Value = subMock<String?>(
      context: context,
      fieldName: 'featuredImage',
      currentLevel: currentLevel,
    );
    final images$Value = subMock<List<String>?>(
      context: context,
      fieldName: 'images',
      currentLevel: currentLevel,
    );
    final vendor$Value = subMock<Vendor?>(
      context: context,
      fieldName: 'vendor',
      currentLevel: currentLevel,
    );
    final currency$Value = subMock<String?>(
      context: context,
      fieldName: 'currency',
      currentLevel: currentLevel,
    );
    final maxPurchaseQuantity$Value = subMock<int?>(
      context: context,
      fieldName: 'maxPurchaseQuantity',
      currentLevel: currentLevel,
    );
    final service$Value = subMock<String?>(
      context: context,
      fieldName: 'service',
      currentLevel: currentLevel,
    );
    final category$Value = subMock<List<Category?>?>(
      context: context,
      fieldName: 'category',
      currentLevel: currentLevel,
    );
    final originalPrice$Value = subMock<Price?>(
      context: context,
      fieldName: 'originalPrice',
      currentLevel: currentLevel,
    );
    final discountRate$Value = subMock<String?>(
      context: context,
      fieldName: 'discountRate',
      currentLevel: currentLevel,
    );
    final isAvailable$Value = subMock<bool?>(
      context: context,
      fieldName: 'isAvailable',
      currentLevel: currentLevel,
    );
    final description$Value = subMock<String?>(
      context: context,
      fieldName: 'description',
      currentLevel: currentLevel,
    );
    final tags$Value = subMock<List<Tag>?>(
      context: context,
      fieldName: 'tags',
      currentLevel: currentLevel,
    );
    final barcode$Value = subMock<String?>(
      context: context,
      fieldName: 'barcode',
      currentLevel: currentLevel,
    );
    final quantity$Value = subMock<int?>(
      context: context,
      fieldName: 'quantity',
      currentLevel: currentLevel,
    );
    final shortUrl$Value = subMock<String?>(
      context: context,
      fieldName: 'shortUrl',
      currentLevel: currentLevel,
    );
    final brand$Value = subMock<Brand?>(
      context: context,
      fieldName: 'brand',
      currentLevel: currentLevel,
    );
    final variantsAttributes$Value = subMock<List<ProductAttribute>?>(
      context: context,
      fieldName: 'variantsAttributes',
      currentLevel: currentLevel,
    );
    final attributes$Value = subMock<List<ProductAttributeValue>?>(
      context: context,
      fieldName: 'attributes',
      currentLevel: currentLevel,
    );
    final userSpecifics$Value = subMock<ProductUserSpecific?>(
      context: context,
      fieldName: 'userSpecifics',
      currentLevel: currentLevel,
    );
    final vendorId$Value = subMock<String?>(
      context: context,
      fieldName: 'vendorId',
      currentLevel: currentLevel,
    );
    return ProductVariant(
      id: id$Value,
      name: name$Value,
      price: price$Value,
      featuredImage: featuredImage$Value,
      images: images$Value,
      vendor: vendor$Value,
      currency: currency$Value,
      maxPurchaseQuantity: maxPurchaseQuantity$Value,
      service: service$Value,
      category: category$Value,
      originalPrice: originalPrice$Value,
      discountRate: discountRate$Value,
      isAvailable: isAvailable$Value,
      description: description$Value,
      tags: tags$Value,
      barcode: barcode$Value,
      quantity: quantity$Value,
      shortUrl: shortUrl$Value,
      brand: brand$Value,
      variantsAttributes: variantsAttributes$Value,
      attributes: attributes$Value,
      userSpecifics: userSpecifics$Value,
      vendorId: vendorId$Value,
    );
  }
}

class SectionLayoutVListMocker extends js.JModelMocker<SectionLayoutVList> {
  const SectionLayoutVListMocker({super.jSerializer});

  @override
  SectionLayoutVList createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final shape$Value = subMock<DynamicItemShape?>(
      context: context,
      fieldName: 'shape',
      currentLevel: currentLevel,
    );
    return SectionLayoutVList(shape: shape$Value);
  }
}

class SectionLayoutHListMocker extends js.JModelMocker<SectionLayoutHList> {
  const SectionLayoutHListMocker({super.jSerializer});

  @override
  SectionLayoutHList createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final shape$Value = subMock<DynamicItemShape?>(
      context: context,
      fieldName: 'shape',
      currentLevel: currentLevel,
    );
    return SectionLayoutHList(shape: shape$Value);
  }
}

class SectionLayoutGridViewMocker
    extends js.JModelMocker<SectionLayoutGridView> {
  const SectionLayoutGridViewMocker({super.jSerializer});

  @override
  SectionLayoutGridView createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final shape$Value = subMock<DynamicItemShape?>(
      context: context,
      fieldName: 'shape',
      currentLevel: currentLevel,
    );
    return SectionLayoutGridView(shape: shape$Value);
  }
}

class SectionLayoutGridPatternMocker
    extends js.JModelMocker<SectionLayoutGridPattern> {
  const SectionLayoutGridPatternMocker({super.jSerializer});

  @override
  SectionLayoutGridPattern createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final shape$Value = subMock<DynamicItemShape?>(
      context: context,
      fieldName: 'shape',
      currentLevel: currentLevel,
    );
    final pattern$Value = subMock<String?>(
      context: context,
      fieldName: 'pattern',
      currentLevel: currentLevel,
    );
    return SectionLayoutGridPattern(
      shape: shape$Value,
      pattern: pattern$Value,
    );
  }
}

class SectionLayoutCarouselMocker
    extends js.JModelMocker<SectionLayoutCarousel> {
  const SectionLayoutCarouselMocker({super.jSerializer});

  @override
  SectionLayoutCarousel createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final shape$Value = subMock<DynamicItemShape?>(
      context: context,
      fieldName: 'shape',
      currentLevel: currentLevel,
    );
    return SectionLayoutCarousel(shape: shape$Value);
  }
}

class SectionLayoutUnknownMocker extends js.JModelMocker<SectionLayoutUnknown> {
  const SectionLayoutUnknownMocker({super.jSerializer});

  @override
  SectionLayoutUnknown createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    return SectionLayoutUnknown();
  }
}

class SectionLayoutMocker extends js.JCustomMocker<SectionLayout> {
  const SectionLayoutMocker({super.jSerializer});

  @override
  SectionLayout createMock([js.JMockerContext? context]) {
    return optionallyRandomizedValueFromListLazy(
      context,
      [
        () => jSerializer.createMock<SectionLayoutVList>(context: context),
        () => jSerializer.createMock<SectionLayoutHList>(context: context),
        () => jSerializer.createMock<SectionLayoutGridView>(context: context),
        () =>
            jSerializer.createMock<SectionLayoutGridPattern>(context: context),
        () => jSerializer.createMock<SectionLayoutCarousel>(context: context),
        () => jSerializer.createMock<SectionLayoutUnknown>(context: context),
      ],
      fallback: () =>
          jSerializer.createMock<SectionLayoutUnknown>(context: context),
    );
  }
}

class DynamicItemShapeMocker extends js.JCustomMocker<DynamicItemShape> {
  const DynamicItemShapeMocker({super.jSerializer});

  @override
  DynamicItemShape createMock([js.JMockerContext? context]) {
    return optionallyRandomizedValueFromList(
      context,
      DynamicItemShape.values,
    );
  }
}

class SuperComplicatedModelMocker
    extends js.JGenericMocker<SuperComplicatedModel> {
  SuperComplicatedModelMocker({super.jSerializer});

  SuperComplicatedModel<T> mock<T>([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final value$Value = subMock<ComplicatedModel<ComplicatedModel<T>>>(
      context: context,
      fieldName: 'value',
      currentLevel: currentLevel,
    );
    final name$Value = subMock<String>(
      context: context,
      fieldName: 'name',
      currentLevel: currentLevel,
    );
    final age$Value = subMock<int>(
      context: context,
      fieldName: 'age',
      currentLevel: currentLevel,
    );
    final isAdult$Value = subMock<bool>(
      context: context,
      fieldName: 'isAdult',
      currentLevel: currentLevel,
    );
    final height$Value = subMock<double>(
      context: context,
      fieldName: 'height',
      currentLevel: currentLevel,
    );
    final friends$Value = subMock<List<String>>(
      context: context,
      fieldName: 'friends',
      currentLevel: currentLevel,
    );
    final map$Value = subMock<Map<String, dynamic>>(
      context: context,
      fieldName: 'map',
      currentLevel: currentLevel,
    );
    final values$Value = subMock<List<ComplicatedModel<ComplicatedModel<T>>>>(
      context: context,
      fieldName: 'values',
      currentLevel: currentLevel,
    );
    final mapValues$Value =
        subMock<Map<String, ComplicatedModel<ComplicatedModel<T>>>>(
      context: context,
      fieldName: 'mapValues',
      currentLevel: currentLevel,
    );
    final nestedValues$Value =
        subMock<List<List<ComplicatedModel<ComplicatedModel<T>>>>>(
      context: context,
      fieldName: 'nestedValues',
      currentLevel: currentLevel,
    );
    final nestedMapValues$Value =
        subMock<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>(
      context: context,
      fieldName: 'nestedMapValues',
      currentLevel: currentLevel,
    );
    final nestedValuesMap$Value =
        subMock<List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>(
      context: context,
      fieldName: 'nestedValuesMap',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMap$Value = subMock<
        Map<String, List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMap',
      currentLevel: currentLevel,
    );
    final nestedValuesMapList$Value =
        subMock<List<List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>>(
      context: context,
      fieldName: 'nestedValuesMapList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapList$Value = subMock<
        Map<String, List<Map<String, ComplicatedModel<ComplicatedModel<T>>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListList$Value = subMock<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListList$Value = subMock<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListList$Value = subMock<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListList$Value = subMock<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListList$Value = subMock<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListListList$Value = subMock<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListListList$Value = subMock<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListListListList$Value = subMock<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListListListList$Value = subMock<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListListListListList$Value = subMock<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListListListListList$Value = subMock<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListListListListListList$Value = subMock<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListListListListListList$Value = subMock<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListListListListListListList$Value = subMock<
        Map<String,
            List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListListListListListListList$Value = subMock<
        List<List<Map<String, List<ComplicatedModel<ComplicatedModel<T>>>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListListListListListListList',
      currentLevel: currentLevel,
    );
    final theModel$Value = subMock<ComplicatedModel<T>>(
      context: context,
      fieldName: 'theModel',
      currentLevel: currentLevel,
    );
    final theModel2$Value = subMock<ComplicatedModel<ComplicatedModel<T>>>(
      context: context,
      fieldName: 'theModel2',
      currentLevel: currentLevel,
    );
    final theModel3$Value =
        subMock<ComplicatedModel<ComplicatedModel<ComplicatedModel<T>>>>(
      context: context,
      fieldName: 'theModel3',
      currentLevel: currentLevel,
    );
    final theModel4$Value = subMock<
        ComplicatedModel<
            ComplicatedModel<ComplicatedModel<ComplicatedModel<T>>>>>(
      context: context,
      fieldName: 'theModel4',
      currentLevel: currentLevel,
    );
    final theModel5$Value = subMock<
        ComplicatedModel<
            ComplicatedModel<
                ComplicatedModel<ComplicatedModel<ComplicatedModel<T>>>>>>(
      context: context,
      fieldName: 'theModel5',
      currentLevel: currentLevel,
    );
    final theModels$Value = subMock<List<ComplicatedModel<T>>>(
      context: context,
      fieldName: 'theModels',
      currentLevel: currentLevel,
    );
    return SuperComplicatedModel<T>(
      value: value$Value,
      name: name$Value,
      age: age$Value,
      isAdult: isAdult$Value,
      height: height$Value,
      friends: friends$Value,
      map: map$Value,
      values: values$Value,
      mapValues: mapValues$Value,
      nestedValues: nestedValues$Value,
      nestedMapValues: nestedMapValues$Value,
      nestedValuesMap: nestedValuesMap$Value,
      nestedMapValuesMap: nestedMapValuesMap$Value,
      nestedValuesMapList: nestedValuesMapList$Value,
      nestedMapValuesMapList: nestedMapValuesMapList$Value,
      nestedValuesMapListList: nestedValuesMapListList$Value,
      nestedMapValuesMapListList: nestedMapValuesMapListList$Value,
      nestedValuesMapListListList: nestedValuesMapListListList$Value,
      nestedMapValuesMapListListList: nestedMapValuesMapListListList$Value,
      nestedValuesMapListListListList: nestedValuesMapListListListList$Value,
      nestedMapValuesMapListListListList:
          nestedMapValuesMapListListListList$Value,
      nestedValuesMapListListListListList:
          nestedValuesMapListListListListList$Value,
      nestedMapValuesMapListListListListList:
          nestedMapValuesMapListListListListList$Value,
      nestedValuesMapListListListListListList:
          nestedValuesMapListListListListListList$Value,
      nestedMapValuesMapListListListListListList:
          nestedMapValuesMapListListListListListList$Value,
      nestedValuesMapListListListListListListList:
          nestedValuesMapListListListListListListList$Value,
      nestedMapValuesMapListListListListListListList:
          nestedMapValuesMapListListListListListListList$Value,
      nestedValuesMapListListListListListListListList:
          nestedValuesMapListListListListListListListList$Value,
      nestedMapValuesMapListListListListListListListList:
          nestedMapValuesMapListListListListListListListList$Value,
      nestedValuesMapListListListListListListListListList:
          nestedValuesMapListListListListListListListListList$Value,
      theModel: theModel$Value,
      theModel2: theModel2$Value,
      theModel3: theModel3$Value,
      theModel4: theModel4$Value,
      theModel5: theModel5$Value,
      theModels: theModels$Value,
    );
  }

  @override
  Function get mocker => mock;
}

class ComplicatedModelMocker extends js.JGenericMocker<ComplicatedModel> {
  ComplicatedModelMocker({super.jSerializer});

  ComplicatedModel<T> mock<T>([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final value$Value = subMock<T>(
      context: context,
      fieldName: 'value',
      currentLevel: currentLevel,
    );
    final name$Value = subMock<String>(
      context: context,
      fieldName: 'name',
      currentLevel: currentLevel,
    );
    final age$Value = subMock<int>(
      context: context,
      fieldName: 'age',
      currentLevel: currentLevel,
    );
    final isAdult$Value = subMock<bool>(
      context: context,
      fieldName: 'isAdult',
      currentLevel: currentLevel,
    );
    final height$Value = subMock<double>(
      context: context,
      fieldName: 'height',
      currentLevel: currentLevel,
    );
    final friends$Value = subMock<List<String>>(
      context: context,
      fieldName: 'friends',
      currentLevel: currentLevel,
    );
    final map$Value = subMock<Map<String, dynamic>>(
      context: context,
      fieldName: 'map',
      currentLevel: currentLevel,
    );
    final values$Value = subMock<List<T>>(
      context: context,
      fieldName: 'values',
      currentLevel: currentLevel,
    );
    final mapValues$Value = subMock<Map<String, T>>(
      context: context,
      fieldName: 'mapValues',
      currentLevel: currentLevel,
    );
    final nestedValues$Value = subMock<List<List<T>>>(
      context: context,
      fieldName: 'nestedValues',
      currentLevel: currentLevel,
    );
    final nestedMapValues$Value = subMock<Map<String, List<T>>>(
      context: context,
      fieldName: 'nestedMapValues',
      currentLevel: currentLevel,
    );
    final nestedValuesMap$Value = subMock<List<Map<String, T>>>(
      context: context,
      fieldName: 'nestedValuesMap',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMap$Value = subMock<Map<String, List<Map<String, T>>>>(
      context: context,
      fieldName: 'nestedMapValuesMap',
      currentLevel: currentLevel,
    );
    final nestedValuesMapList$Value = subMock<List<List<Map<String, T>>>>(
      context: context,
      fieldName: 'nestedValuesMapList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapList$Value =
        subMock<Map<String, List<Map<String, T>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListList$Value =
        subMock<List<List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListList$Value =
        subMock<Map<String, List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListList$Value =
        subMock<List<List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListList$Value =
        subMock<Map<String, List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListList$Value =
        subMock<List<List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListListList$Value =
        subMock<Map<String, List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListListList$Value =
        subMock<List<List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListListListList$Value =
        subMock<Map<String, List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListListListList$Value =
        subMock<List<List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListListListListList$Value =
        subMock<Map<String, List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListListListListList$Value =
        subMock<List<List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListListListListListList$Value =
        subMock<Map<String, List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListListListListListList$Value =
        subMock<List<List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListListListListListListListList$Value =
        subMock<Map<String, List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListListListListListListListList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListListListListListListListListList$Value =
        subMock<List<List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListListListListListListListListList',
      currentLevel: currentLevel,
    );
    return ComplicatedModel<T>(
      value: value$Value,
      name: name$Value,
      age: age$Value,
      isAdult: isAdult$Value,
      height: height$Value,
      friends: friends$Value,
      map: map$Value,
      values: values$Value,
      mapValues: mapValues$Value,
      nestedValues: nestedValues$Value,
      nestedMapValues: nestedMapValues$Value,
      nestedValuesMap: nestedValuesMap$Value,
      nestedMapValuesMap: nestedMapValuesMap$Value,
      nestedValuesMapList: nestedValuesMapList$Value,
      nestedMapValuesMapList: nestedMapValuesMapList$Value,
      nestedValuesMapListList: nestedValuesMapListList$Value,
      nestedMapValuesMapListList: nestedMapValuesMapListList$Value,
      nestedValuesMapListListList: nestedValuesMapListListList$Value,
      nestedMapValuesMapListListList: nestedMapValuesMapListListList$Value,
      nestedValuesMapListListListList: nestedValuesMapListListListList$Value,
      nestedMapValuesMapListListListList:
          nestedMapValuesMapListListListList$Value,
      nestedValuesMapListListListListList:
          nestedValuesMapListListListListList$Value,
      nestedMapValuesMapListListListListList:
          nestedMapValuesMapListListListListList$Value,
      nestedValuesMapListListListListListList:
          nestedValuesMapListListListListListList$Value,
      nestedMapValuesMapListListListListListList:
          nestedMapValuesMapListListListListListList$Value,
      nestedValuesMapListListListListListListList:
          nestedValuesMapListListListListListListList$Value,
      nestedMapValuesMapListListListListListListList:
          nestedMapValuesMapListListListListListListList$Value,
      nestedValuesMapListListListListListListListList:
          nestedValuesMapListListListListListListListList$Value,
      nestedMapValuesMapListListListListListListListList:
          nestedMapValuesMapListListListListListListListList$Value,
      nestedValuesMapListListListListListListListListList:
          nestedValuesMapListListListListListListListListList$Value,
    );
  }

  @override
  Function get mocker => mock;
}

class SemiComplicatedModelMocker
    extends js.JGenericMocker<SemiComplicatedModel> {
  SemiComplicatedModelMocker({super.jSerializer});

  SemiComplicatedModel<T> mock<T>([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final value$Value = subMock<T>(
      context: context,
      fieldName: 'value',
      currentLevel: currentLevel,
    );
    final name$Value = subMock<String>(
      context: context,
      fieldName: 'name',
      currentLevel: currentLevel,
    );
    final age$Value = subMock<int>(
      context: context,
      fieldName: 'age',
      currentLevel: currentLevel,
    );
    final isAdult$Value = subMock<bool>(
      context: context,
      fieldName: 'isAdult',
      currentLevel: currentLevel,
    );
    final height$Value = subMock<double>(
      context: context,
      fieldName: 'height',
      currentLevel: currentLevel,
    );
    final friends$Value = subMock<List<String>>(
      context: context,
      fieldName: 'friends',
      currentLevel: currentLevel,
    );
    final map$Value = subMock<Map<String, dynamic>>(
      context: context,
      fieldName: 'map',
      currentLevel: currentLevel,
    );
    final values$Value = subMock<List<T>>(
      context: context,
      fieldName: 'values',
      currentLevel: currentLevel,
    );
    final mapValues$Value = subMock<Map<String, T>>(
      context: context,
      fieldName: 'mapValues',
      currentLevel: currentLevel,
    );
    final nestedValues$Value = subMock<List<List<T>>>(
      context: context,
      fieldName: 'nestedValues',
      currentLevel: currentLevel,
    );
    final nestedMapValues$Value = subMock<Map<String, List<T>>>(
      context: context,
      fieldName: 'nestedMapValues',
      currentLevel: currentLevel,
    );
    final nestedValuesMap$Value = subMock<List<Map<String, T>>>(
      context: context,
      fieldName: 'nestedValuesMap',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMap$Value = subMock<Map<String, List<Map<String, T>>>>(
      context: context,
      fieldName: 'nestedMapValuesMap',
      currentLevel: currentLevel,
    );
    final nestedValuesMapList$Value = subMock<List<List<Map<String, T>>>>(
      context: context,
      fieldName: 'nestedValuesMapList',
      currentLevel: currentLevel,
    );
    final nestedValuesMapListList$Value =
        subMock<List<List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedValuesMapListList',
      currentLevel: currentLevel,
    );
    final nestedMapValuesMapListList$Value =
        subMock<Map<String, List<Map<String, List<T>>>>>(
      context: context,
      fieldName: 'nestedMapValuesMapListList',
      currentLevel: currentLevel,
    );
    return SemiComplicatedModel<T>(
      value: value$Value,
      name: name$Value,
      age: age$Value,
      isAdult: isAdult$Value,
      height: height$Value,
      friends: friends$Value,
      map: map$Value,
      values: values$Value,
      mapValues: mapValues$Value,
      nestedValues: nestedValues$Value,
      nestedMapValues: nestedMapValues$Value,
      nestedValuesMap: nestedValuesMap$Value,
      nestedMapValuesMap: nestedMapValuesMap$Value,
      nestedValuesMapList: nestedValuesMapList$Value,
      nestedValuesMapListList: nestedValuesMapListList$Value,
      nestedMapValuesMapListList: nestedMapValuesMapListList$Value,
    );
  }

  @override
  Function get mocker => mock;
}

class ProductCustomizationMocker extends js.JModelMocker<ProductCustomization> {
  const ProductCustomizationMocker({super.jSerializer});

  @override
  ProductCustomization createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final id$Value = subMock<String>(
      context: context,
      fieldName: 'id',
      currentLevel: currentLevel,
    );
    final decoration$Value = subMock<ProductCustomizationDecoration?>(
      context: context,
      fieldName: 'decoration',
      currentLevel: currentLevel,
    );
    final minSelection$Value = subMock<int?>(
      context: context,
      fieldName: 'minSelection',
      currentLevel: currentLevel,
    );
    final maxSelection$Value = subMock<int?>(
      context: context,
      fieldName: 'maxSelection',
      currentLevel: currentLevel,
    );
    final values$Value = subMock<List<ProductCustomizationValue>?>(
      context: context,
      fieldName: 'values',
      currentLevel: currentLevel,
    );
    return ProductCustomization(
      id: id$Value,
      decoration: decoration$Value,
      minSelection: minSelection$Value,
      maxSelection: maxSelection$Value,
      values: values$Value,
    );
  }
}

class ProductCustomizationValueMocker
    extends js.JModelMocker<ProductCustomizationValue> {
  const ProductCustomizationValueMocker({super.jSerializer});

  @override
  ProductCustomizationValue createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final id$Value = subMock<String>(
      context: context,
      fieldName: 'id',
      currentLevel: currentLevel,
    );
    final name$Value = subMock<String?>(
      context: context,
      fieldName: 'name',
      currentLevel: currentLevel,
    );
    final featuredImage$Value = subMock<String?>(
      context: context,
      fieldName: 'featuredImage',
      currentLevel: currentLevel,
    );
    final description$Value = subMock<String?>(
      context: context,
      fieldName: 'description',
      currentLevel: currentLevel,
    );
    final price$Value = subMock<Price?>(
      context: context,
      fieldName: 'price',
      currentLevel: currentLevel,
    );
    return ProductCustomizationValue(
      id: id$Value,
      name: name$Value,
      featuredImage: featuredImage$Value,
      description: description$Value,
      price: price$Value,
    );
  }
}

class ProductCustomizationDecorationMocker
    extends js.JModelMocker<ProductCustomizationDecoration> {
  const ProductCustomizationDecorationMocker({super.jSerializer});

  @override
  ProductCustomizationDecoration createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final title$Value = subMock<String?>(
      context: context,
      fieldName: 'title',
      currentLevel: currentLevel,
    );
    final preTitle$Value = subMock<String?>(
      context: context,
      fieldName: 'preTitle',
      currentLevel: currentLevel,
    );
    final subtitle$Value = subMock<String?>(
      context: context,
      fieldName: 'subtitle',
      currentLevel: currentLevel,
    );
    return ProductCustomizationDecoration(
      title: title$Value,
      preTitle: preTitle$Value,
      subtitle: subtitle$Value,
    );
  }
}

class PriceMocker extends js.JModelMocker<Price> {
  const PriceMocker({super.jSerializer});

  @override
  Price createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final amount$Value = subMock<double>(
      context: context,
      fieldName: 'amount',
      currentLevel: currentLevel,
    );
    final currency$Value = subMock<String?>(
      context: context,
      fieldName: 'currency',
      currentLevel: currentLevel,
    );
    return Price(
      amount: amount$Value,
      currency: currency$Value,
    );
  }
}

class SomeModelMocker extends js.JModelMocker<SomeModel> {
  const SomeModelMocker({super.jSerializer});

  static const _$field1_$StringMocker = js.StringMocker(language: 'ar');

  static const _$field2_$StringMocker = js.StringMocker(language: 'en');

  @override
  SomeModel createMock([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final field1$Value = _$field1_$StringMocker.createMock(context);
    final field2$Value = _$field2_$StringMocker.createMock(context);
    final field3$Value = subMock<double?>(
      context: context,
      fieldName: 'field3',
      currentLevel: currentLevel,
    );
    final field4$Value = subMock<int?>(
      context: context,
      fieldName: 'field4',
      currentLevel: currentLevel,
    );
    return SomeModel(
      field1: field1$Value,
      field2: field2$Value,
      field3: field3$Value,
      field4: field4$Value,
    );
  }
}

class SomeGenericModelMocker extends js.JGenericMocker<SomeGenericModel> {
  SomeGenericModelMocker({super.jSerializer});

  SomeGenericModel<T> mock<T>([js.JMockerContext? context]) {
    final prevLevel = context?.currentDepthLevel ?? 0;
    final currentLevel = prevLevel + 1;
    final value$Value = subMock<T>(
      context: context,
      fieldName: 'value',
      currentLevel: currentLevel,
    );
    return SomeGenericModel<T>(value: value$Value);
  }

  @override
  Function get mocker => mock;
}

class SomeEnumMocker extends js.JCustomMocker<SomeEnum> {
  const SomeEnumMocker({super.jSerializer});

  @override
  SomeEnum createMock([js.JMockerContext? context]) {
    return optionallyRandomizedValueFromList(
      context,
      SomeEnum.values,
    );
  }
}

void initializeJSerializer({js.JSerializerInterface? jSerializer}) {
  final instance = jSerializer ?? js.JSerializer.i;
  instance.register<Product>(
    (s) => ProductSerializer(jSerializer: s),
    (Function f) => f<Product>(),
    mockFactory: (s) => ProductMocker(jSerializer: s),
  );
  instance.register<Tag>(
    (s) => TagSerializer(jSerializer: s),
    (Function f) => f<Tag>(),
    mockFactory: (s) => TagMocker(jSerializer: s),
  );
  instance.register<Vendor>(
    (s) => VendorSerializer(jSerializer: s),
    (Function f) => f<Vendor>(),
    mockFactory: (s) => VendorMocker(jSerializer: s),
  );
  instance.register<Category>(
    (s) => CategorySerializer(jSerializer: s),
    (Function f) => f<Category>(),
    mockFactory: (s) => CategoryMocker(jSerializer: s),
  );
  instance.register<ProductUserSpecific>(
    (s) => ProductUserSpecificSerializer(jSerializer: s),
    (Function f) => f<ProductUserSpecific>(),
    mockFactory: (s) => ProductUserSpecificMocker(jSerializer: s),
  );
  instance.register<ProductAttribute>(
    (s) => ProductAttributeSerializer(jSerializer: s),
    (Function f) => f<ProductAttribute>(),
    mockFactory: (s) => ProductAttributeMocker(jSerializer: s),
  );
  instance.register<ProductAttributeValue>(
    (s) => ProductAttributeValueSerializer(jSerializer: s),
    (Function f) => f<ProductAttributeValue>(),
    mockFactory: (s) => ProductAttributeValueMocker(jSerializer: s),
  );
  instance.register<Brand>(
    (s) => BrandSerializer(jSerializer: s),
    (Function f) => f<Brand>(),
    mockFactory: (s) => BrandMocker(jSerializer: s),
  );
  instance.register<ProductVariant>(
    (s) => ProductVariantSerializer(jSerializer: s),
    (Function f) => f<ProductVariant>(),
    mockFactory: (s) => ProductVariantMocker(jSerializer: s),
  );
  instance.register<SectionLayoutVList>(
    (s) => SectionLayoutVListSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutVList>(),
    mockFactory: (s) => SectionLayoutVListMocker(jSerializer: s),
  );
  instance.register<SectionLayoutHList>(
    (s) => SectionLayoutHListSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutHList>(),
    mockFactory: (s) => SectionLayoutHListMocker(jSerializer: s),
  );
  instance.register<SectionLayoutGridView>(
    (s) => SectionLayoutGridViewSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutGridView>(),
    mockFactory: (s) => SectionLayoutGridViewMocker(jSerializer: s),
  );
  instance.register<SectionLayoutGridPattern>(
    (s) => SectionLayoutGridPatternSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutGridPattern>(),
    mockFactory: (s) => SectionLayoutGridPatternMocker(jSerializer: s),
  );
  instance.register<SectionLayoutCarousel>(
    (s) => SectionLayoutCarouselSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutCarousel>(),
    mockFactory: (s) => SectionLayoutCarouselMocker(jSerializer: s),
  );
  instance.register<SectionLayoutUnknown>(
    (s) => SectionLayoutUnknownSerializer(jSerializer: s),
    (Function f) => f<SectionLayoutUnknown>(),
    mockFactory: (s) => SectionLayoutUnknownMocker(jSerializer: s),
  );
  instance.register<SectionLayout>(
    (s) => SectionLayoutSerializer(jSerializer: s),
    (Function f) => f<SectionLayout>(),
    mockFactory: (s) => SectionLayoutMocker(jSerializer: s),
  );
  instance.register<DynamicItemShape>(
    (s) => DynamicItemShapeSerializer(jSerializer: s),
    (Function f) => f<DynamicItemShape>(),
    mockFactory: (s) => DynamicItemShapeMocker(jSerializer: s),
  );
  instance.register<SuperComplicatedModel>(
    (s) => SuperComplicatedModelSerializer(jSerializer: s),
    <T>(Function f) => f<SuperComplicatedModel<T>>(),
    mockFactory: (s) => SuperComplicatedModelMocker(jSerializer: s),
  );
  instance.register<ComplicatedModel>(
    (s) => ComplicatedModelSerializer(jSerializer: s),
    <T>(Function f) => f<ComplicatedModel<T>>(),
    mockFactory: (s) => ComplicatedModelMocker(jSerializer: s),
  );
  instance.register<SemiComplicatedModel>(
    (s) => SemiComplicatedModelSerializer(jSerializer: s),
    <T>(Function f) => f<SemiComplicatedModel<T>>(),
    mockFactory: (s) => SemiComplicatedModelMocker(jSerializer: s),
  );
  instance.register<ProductCustomization>(
    (s) => ProductCustomizationSerializer(jSerializer: s),
    (Function f) => f<ProductCustomization>(),
    mockFactory: (s) => ProductCustomizationMocker(jSerializer: s),
  );
  instance.register<ProductCustomizationValue>(
    (s) => ProductCustomizationValueSerializer(jSerializer: s),
    (Function f) => f<ProductCustomizationValue>(),
    mockFactory: (s) => ProductCustomizationValueMocker(jSerializer: s),
  );
  instance.register<ProductCustomizationDecoration>(
    (s) => ProductCustomizationDecorationSerializer(jSerializer: s),
    (Function f) => f<ProductCustomizationDecoration>(),
    mockFactory: (s) => ProductCustomizationDecorationMocker(jSerializer: s),
  );
  instance.register<Price>(
    (s) => PriceSerializer(jSerializer: s),
    (Function f) => f<Price>(),
    mockFactory: (s) => PriceMocker(jSerializer: s),
  );
  instance.register<SomeModel>(
    (s) => SomeModelSerializer(jSerializer: s),
    (Function f) => f<SomeModel>(),
    mockFactory: (s) => SomeModelMocker(jSerializer: s),
  );
  instance.register<SomeGenericModel>(
    (s) => SomeGenericModelSerializer(jSerializer: s),
    <T>(Function f) => f<SomeGenericModel<T>>(),
    mockFactory: (s) => SomeGenericModelMocker(jSerializer: s),
  );
  instance.register<SomeCustomModel>(
    (s) => SomeCustomModelCustomSerializer(jSerializer: s),
    (Function f) => f<SomeCustomModel>(),
    mockFactory: (s) => SomeCustomModelMocker(jSerializer: s),
  );
  instance.register<SomeEnum>(
    (s) => SomeEnumSerializer(jSerializer: s),
    (Function f) => f<SomeEnum>(),
    mockFactory: (s) => SomeEnumMocker(jSerializer: s),
  );
}
