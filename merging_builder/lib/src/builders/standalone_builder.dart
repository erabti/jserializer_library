import 'dart:async';
import 'package:build/build.dart';
import 'package:exception_templates/exception_templates.dart';
import 'package:file/local.dart';
import 'package:glob/glob.dart';
import 'package:lazy_memo/lazy_memo.dart';
import 'package:path/path.dart' as path;
import 'package:source_gen/source_gen.dart' show Generator, LibraryReader;

import 'formatter.dart';
import 'synthetic_input.dart';
import 'synthetic_builder.dart';

/// Builder that uses synthetic input and
/// creates one output file for each input file.
/// * The type parameter `S` represents the synthetic input used by the builder.
///   Valid types are [LibDir] and [PackageDir], both extending [SyntheticInput].
class StandaloneBuilder<S extends SyntheticInput> extends SyntheticBuilder<S> {
  /// Constructs a [StandaloneBuilder] object.
  ///
  /// - [inputFiles] defaults to: `'lib/*.dart'`. Glob-style syntax supported.
  ///
  /// - [outputFiles]: Path to the output files.
  /// The symbol `(*)` will be replaced with the corresponding input file name
  /// (omitting the extension). Defaults to: `'lib/standalone_(*).dart'`.
  ///
  /// - [generator]: An instance of [Generator].
  ///
  /// - [header]: A String that will be inserted at the top of the
  /// generated file below the 'DO NOT EDIT' warning message.
  ///
  /// - [footer]: A String that will be inserted at the very bottom of the
  /// generated file.
  ///
  /// - [formatter]: A function with signature `String Function(String input)`.
  /// Defaults to `DartFormatter().format`.
  /// To disable formatting one may pass a closure returning the
  /// input: `(input) => input` as argument for `formatter`.
  StandaloneBuilder({
    String inputFiles = 'lib/*.dart',
    this.outputFiles = 'lib/standalone_(*).dart',
    required this.generator,
    String header = '',
    String footer = '',
    Formatter? formatter,
    String root = '',
  })  : root = root.trim(),
        super(
            inputFiles: inputFiles,
            header: header,
            footer: footer,
            formatter: formatter) {
    _resolvedOutputFiles = Lazy(_outputPaths);
  }

  /// Path to output files.
  /// The symbol `(*)` will be replaced with the corresponding input file name
  /// (omitting the extension).
  ///
  /// Example: `lib/standalone_(*).dart`
  final String outputFiles;

  /// Instance of [Generator].
  final Generator generator;

  /// Lazily computes the output file names by replacing the
  /// placeholder `(*)` in [outputFiles] with the input file basename.
  late final Lazy<List<String>> _resolvedOutputFiles;

  /// The root directory of the package the build is applied to.
  /// This variable does not need to be set if the build command is initiated
  /// from the root directory of the package.
  final String root;

  /// Returns a map of type `Map<String, List<String>>`
  /// with content {synthetic input: list of output files}.
  ///
  /// The builder uses the synthetic input specified by the
  /// type parameter [S].
  @override
  Map<String, List<String>> get buildExtensions => {
        syntheticInput.value: _resolvedOutputFiles(),
      };

  @override
  FutureOr<void> build(BuildStep buildStep) async {
    final libAssetIds = await libraryAssetIds(buildStep);
    // Accessing libraries.
    for (final libAssetId in libAssetIds) {
      final library = LibraryReader(
        await buildStep.resolver.libraryFor(libAssetId),
      );
      // Calling generator.generate.
      log.fine('Running ${generator.runtimeType} on: ${libAssetId.path}.');

      // Create output file name.
      await buildStep.writeAsString(
        AssetId(
          buildStep.inputId.package,
          _outputFile(libAssetId),
        ),
        arrangeContent((await generator.generate(library, buildStep)) ?? '',
            generatedBy: 'Generated by ${generator.runtimeType}. '),
      );
    }
  }

  /// Returns the path of the output file for a given input file [assetId].
  String _outputFile(AssetId assetId) {
    final basename = path.basenameWithoutExtension(assetId.path);
    return outputFiles.replaceAll(RegExp(r'\(\*\)'), basename);
  }

  /// Returns a list of output file paths.
  List<String> _outputPaths() {
    final result = <String>[];
    SyntheticInput.validatePath<S>(inputFiles);
    SyntheticInput.validatePath<S>(outputFiles);
    final resolvedInputFiles = Glob(inputFiles);
    final fileSystem = LocalFileSystem();
    for (final inputEntity
        in resolvedInputFiles.listFileSystemSync(fileSystem, root: root)) {
      final basename = path.basenameWithoutExtension(inputEntity.path);
      final outputFileName = outputFiles.replaceAll(
        RegExp(r'\(\*\)'),
        basename,
      );
      // Check if output clashes with input files.
      if (path.equals(outputFileName, inputEntity.path)) {
        throw ErrorOf<StandaloneBuilder>(
            message: 'Output file clashes with input file!',
            expectedState: 'Output files must not overwrite input files. '
                'Check the [StandaloneBuilder] '
                'constructor argument [outputFiles].',
            invalidState: 'Output: $outputFileName is also an input file.');
      }
      result.add(outputFileName);
    }
    return result;
  }
}
